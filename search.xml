<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript高级 -- 难点</title>
      <link href="/2022/08/08/20220808/"/>
      <url>/2022/08/08/20220808/</url>
      
        <content type="html"><![CDATA[<h3 id="实现继承的方法有哪些"><a href="#实现继承的方法有哪些" class="headerlink" title="实现继承的方法有哪些"></a>实现继承的方法有哪些</h3><h4 id="借助构造函数（伪造对象-经典继承）"><a href="#借助构造函数（伪造对象-经典继承）" class="headerlink" title="借助构造函数（伪造对象/经典继承）"></a>借助构造函数（伪造对象/经典继承）</h4><p><strong>思路：</strong>在子类构造方法中调用超类型构造方法，可以通过使用<code>apply()</code>和<code>call()</code>方法在新创建的对象上执行构造函数</p><blockquote><p><code>apply()</code>: apply则必须把参数放在一个数组里来传，<code>B.apply(A, arguments)</code>,<code>A</code>对象调用<code>B</code>对象的方法<br><code>call()</code>: call把参数作为离散的值来传，<code>B.call(A, args1,args2)</code>,<code>A</code>对象调用<code>B</code>对象的方法<br>实际上，<code>apply</code>和<code>call</code>的功能是一样的，可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由<code>thisObj</code>指定的新对象，只是传入的参数列表形式不同</p></blockquote><p><strong>缺点：</strong>方法都在构造函数中定义，函数的复用就无从谈起，在超类型的原型中定义的方法，对子类而言也是不可见的，结果所有的类型只能使用构造函数构造函数模式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//继承了SuperType</span><span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"red,blue,green,black"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>instance1<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><p><strong>思路：</strong>子类的原型对象是父类的一个实例对象<br><strong>注意：</strong>将子类的原型对象的<code>constructor</code>属性的值改为子类的构造函数（重点）<br>    每个对象的原型对象都有一个<code>constructor</code>属性指向该对象的构造函数。<br>    而当更改了对象的原型对象后，<code>constructor</code>会随之消失，所以需要重新定义<code>constructor</code>属性，让其重新指向该对象的构造函数。<br><strong>缺点：</strong>只能继承一个父类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重新定义constructor属性</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SubType<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span>   <span class="token comment">//ƒ SuperType() {}</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor<span class="token punctuation">)</span>   <span class="token comment">//ƒ SubType() {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组合继承（伪经典继承）"><a href="#组合继承（伪经典继承）" class="headerlink" title="组合继承（伪经典继承）"></a>组合继承（伪经典继承）</h4><p><strong>思路：</strong>将原型链和借用构造函数的技术组合到一起，原型链实现对原型属性和方法的继承，通过借用构造函数来实现实例属性的继承。<br><strong>优点：</strong>既通过在原型上定义方法实现了函数复用，又能保证每一个实例都有它自己的数组。避免了原型链和构造函数的缺陷，融合他们的优点，成为<code>JavaScript</code>中常用的继承模式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1、父构造函数</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// this 指向父构造函数的对象实例</span><span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Father</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">fatherSay</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"我是父亲"</span><span class="token punctuation">}</span><span class="token comment">//2、子构造函数</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> sno<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sonSay</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"我是孩子"</span><span class="token punctuation">}</span><span class="token comment">//如果利用对象的形式修改了原型对象，别忘了利用constructor 指回构造函数。</span><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son<span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'小王'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token string">'老王'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>father<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><p><strong>思路：</strong>与构造函数工程模式相似，创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真的是它做了所有工作一样返回对象。<br><strong>缺点：</strong>使用寄生式继承来为对象添加函数，会由于不能做到函数复用而降低效率</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过调用函数创建一个新对象</span>    clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//以某种方式来增强这个对象</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token comment">//返回这个对象</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"Alvin"</span><span class="token punctuation">,</span>    <span class="token literal-property property">friends</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'Yannis'</span><span class="token punctuation">,</span><span class="token string">"Lucy"</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>anotherPerson<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><p><strong>思路：</strong>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给给予子类型的原型。<br>开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。<br><code>extend()</code>方法采用了这样的方式。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><blockquote><p>原型链：当在实例化的对象中访问一个属性时，首先会在该对象内部(自身属性)寻找，如找不到，则会向其<code>__proto__</code>指向的原型中寻找，如仍找不到，则继续向原型中<code>__proto__</code>指向的上级原型中寻找，直至找到或<code>Object.prototype.__proto__</code>为止（值为null），这种链状过程即为原型链</p></blockquote><ol><li>每个函数<code>function</code> 都有一个<code>prototype</code> 即显式原型（属性）</li><li>每个实例对象都有一个<code>__proto__</code>，可称为隐式原型（属性）</li><li>对象的隐式原型的值为其对应构造函数的显示原型的值</li></ol><p><img src="https://s2.loli.net/2022/05/16/gvtDXwUT7QdAi8Z.jpg" alt="原型链"></p><ul><li><p>只要有构造函数就有<code>prototype</code>属性指向与之对应的原型对象</p></li><li><p>只要有原型对象就有<code>constructor</code>属性指向对应的构造函数</p></li><li><p>只要有对象就有<code>__proto__</code>属性指向自身对应的构造函数的原型</p></li><li><p>对象函数也是对象，<code>js</code>中所有的函数对象都是<code>Function</code>构造函数创建的</p></li><li><p><code>js</code>中所有的对象都是构造函数创建的</p><ul><li>原型对象由<code>Object</code>构造函数创建</li><li>函数对象由<code>Function</code>构造函数创建</li><li>实例化对象由对应的构造函数创建</li></ul></li></ul><p><strong>注意：</strong><br><img src="https://s2.loli.net/2022/05/16/ndUM9xTlXyR3Wr1.jpg"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token keyword">function</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token keyword">function</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="对this的理解"><a href="#对this的理解" class="headerlink" title="对this的理解"></a>对this的理解</h3><p>this是一个关键字，它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。</p><ol><li>作为纯粹的函数调用，<code>this</code>指向全局对象</li><li>作为对象的方法调用，<code>this</code>指向调用对象</li><li>作为构造函数被调用，<code>this</code>指向新的对象（<code>new</code>会改变<code>this</code>指向）</li><li><code>apply</code>调用，<code>this</code>指向<code>apply</code>方法的第一个参数</li></ol><h3 id="JS的内置对象"><a href="#JS的内置对象" class="headerlink" title="JS的内置对象"></a>JS的内置对象</h3><p><code>Object</code>是<code>JavaScript</code>中所有对象的父对象<br>数据封装对象：<code>Object</code>,<code>Array</code>,<code>Boolean</code>,<code>Number</code>,<code>String</code><br>其他对象：<code>Function</code>,<code>Argument</code>,<code>Math</code>,<code>Date</code>,<code>RegExp</code>,<code>Error</code></p><h3 id="Async-Await-关键字"><a href="#Async-Await-关键字" class="headerlink" title="Async Await 关键字"></a>Async Await 关键字</h3><p>Async Await 基于promise的语法糖，以同步编程的方式去写异步代码<br>async 永远返回是一个promise(promise.resolve)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"我爱学习"</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>await关键字<br>不能单独使用，必须和async一起使用</p><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><h4 id="为什么会出现跨域问题"><a href="#为什么会出现跨域问题" class="headerlink" title="为什么会出现跨域问题"></a>为什么会出现跨域问题</h4><p>浏览器会受到同源策略的限制，同源策略是一种约定，所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）</p><h4 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h4><p>当一个请求<code>url</code>的协议、域名、端口三者之间任意一个与当前页面<code>url</code>不同即为跨域。<br><code>http://www.test.com:8080/</code> ===&gt;<br><code>http</code>：协议<br><code>www.test.com</code>：域名<br><code>8080</code>：端口</p><h4 id="解决跨域的方法"><a href="#解决跨域的方法" class="headerlink" title="解决跨域的方法"></a>解决跨域的方法</h4><ul><li>jsonp</li><li>cors</li><li>服务器代理</li></ul><p><strong>jsonp</strong><br>网页通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求 <code>JSON</code> 数据，服务器收到请求后，将数据放在一个指定名字的回调函数的参数位置传回来<br>优点：简单适用，兼容性好（兼容低版本<code>IE</code>）<br>缺点：只支持<code>get</code>请求，不支持<code>post</code>请求</p><ol><li>原生实现：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://test.com/data.php?callback=dosomething"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token comment">// 向服务器test.com发出请求，该请求的查询字符串有一个callback参数，用来指定回调函数的名字</span> <span class="token comment">// 处理服务器返回回调函数的数据</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">function</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 处理获得的数据</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>jQuery ajax：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://www.test.com:8080/login'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">'jsonp'</span><span class="token punctuation">,</span>  <span class="token comment">// 请求方式为jsonp</span>    <span class="token literal-property property">jsonpCallback</span><span class="token operator">:</span> <span class="token string">"handleCallback"</span><span class="token punctuation">,</span>    <span class="token comment">// 自定义回调函数名</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>Vue.js<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token string">'http://www.domain2.com:8080/login'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">jsonp</span><span class="token operator">:</span> <span class="token string">'handleCallback'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>[<a href="https://blog.csdn.net/qq_38128179/article/details/84956552]">https://blog.csdn.net/qq_38128179/article/details/84956552]</a></p><h3 id="cookie-存储机制"><a href="#cookie-存储机制" class="headerlink" title="cookie:存储机制"></a>cookie:存储机制</h3><p>第一次请求网页没有cookie<br>服务器返回set-cookie<br>请求 + cookie<br>登录页面设置记住我cookie</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//设置客户端cookie</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">username</span><span class="token template-punctuation string">`</span></span><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css常见布局</title>
      <link href="/2022/07/08/20220708/"/>
      <url>/2022/07/08/20220708/</url>
      
        <content type="html"><![CDATA[<h2 id="两栏布局-左边固定右边自适应"><a href="#两栏布局-左边固定右边自适应" class="headerlink" title="两栏布局(左边固定右边自适应)"></a>两栏布局(左边固定右边自适应)</h2><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>需要两个div实现，一个div设置浮动，并设置宽度</p><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>需要三个div，其中一个div是父容器，包含两个子元素。<br>两个子元素设置相对定位，给上边的子元素设置宽度，下边的子元素设置left,值为上边子元素的宽度，再设置right:0。<br>给父容器设置相对定位是因为可以让其设置绝对定位的子元素相对它进行移动；给上边的子元素设置绝对定位可以让下边的子元素跟它在同一行。</p><h3 id="flex弹性盒子"><a href="#flex弹性盒子" class="headerlink" title="flex弹性盒子"></a>flex弹性盒子</h3><p>需要三个div，其中一个div是父容器，包含两个子元素。<br>父元素设置display:flex;上边子元素设置宽度，下边子元素设置flex:1</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.parent</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.left</span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span>0 0 100px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.right</span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span>1 1 auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三栏布局-左右两边固定中间自适应"><a href="#三栏布局-左右两边固定中间自适应" class="headerlink" title="三栏布局(左右两边固定中间自适应)"></a>三栏布局(左右两边固定中间自适应)</h2><h3 id="浮动-1"><a href="#浮动-1" class="headerlink" title="浮动"></a>浮动</h3><h4 id="1-流体布局"><a href="#1-流体布局" class="headerlink" title="1. 流体布局"></a>1. 流体布局</h4><p><strong>原理:</strong> 左右模块各自向左右浮动，并设置中间模块的margin值使中间模块宽度自适应<br><strong>缺点:</strong> 主要内容无法最先加载，当页面内容较多时会影响用户体验</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>三栏布局——float<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">div</span> <span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.left</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.right</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.center</span> <span class="token punctuation">{</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>6<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 44<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>9<span class="token punctuation">,</span> 134<span class="token punctuation">,</span> 236<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-BFC布局"><a href="#2-BFC布局" class="headerlink" title="2. BFC布局"></a>2. BFC布局</h4><blockquote><p>关于BFC: <a href="https://fanxx123.github.io/2022/07/10/css-2/">https://fanxx123.github.io/2022/07/10/css-2/</a></p></blockquote><p><strong>原理:</strong> BFC规则有这样的描述：BFC 区域不会与浮动元素重叠, 因此可以利用这一点来实现 3 列布局<br><strong>缺点:</strong> 主要内容模块无法最先加载，当页面中内容较多时会影响用户体验。因此为了解决这个问题，使用双飞翼布局方案</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>三栏布局——BFC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">div</span> <span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.left</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.right</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.center</span> <span class="token punctuation">{</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>6<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 44<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>9<span class="token punctuation">,</span> 134<span class="token punctuation">,</span> 236<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-双飞翼"><a href="#3-双飞翼" class="headerlink" title="3. 双飞翼"></a>3. 双飞翼</h4><p><strong>原理：</strong>给center添加一个容器元素container，设置center的margin值避开侧边栏，让left、right飘在两边<br><strong>优点:</strong> 主要内容模块可以优先加载，当页面中内容较多时不会影响用户体验。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>三栏布局——双飞翼<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.container</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.center</span> <span class="token punctuation">{</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.right</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>            <span class="token comment">/*自身宽度*/</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.left</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>            <span class="token comment">/*基于父元素百分比的外边距*/</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>6<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 44<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>9<span class="token punctuation">,</span> 134<span class="token punctuation">,</span> 236<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-圣杯布局"><a href="#4-圣杯布局" class="headerlink" title="4. 圣杯布局"></a>4. 圣杯布局</h4><p>**和双飞翼布局的区别: **与双飞翼布局很像，有一些细节上的区别，相对于双飞翼布局来说，HTML 结构相对简单，但是样式定义就稍微复杂，也是优先加载内容主体。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>三栏布局——圣杯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.container</span> <span class="token punctuation">{</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.center</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.left</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.right</span> <span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>9<span class="token punctuation">,</span> 134<span class="token punctuation">,</span> 236<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>6<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 44<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定位-1"><a href="#定位-1" class="headerlink" title="定位"></a>定位</h3><p><strong>优点:</strong> 简单实用，并且主要内容可以优先加载。</p><h3 id="flex弹性盒子-1"><a href="#flex弹性盒子-1" class="headerlink" title="flex弹性盒子"></a>flex弹性盒子</h3><p><strong>原理：</strong> 设置父元素 display:flex;再设置子元素的flex；</p><p>flex 属性是 flex-grow、flex-shrink 和 flex-basis 属性的简写属性：</p><p>flex-grow：项目将相对于其他灵活的项目进行扩展的量<br>flex-shrink：规定项目将相对于其他灵活的项目进行收缩的量<br>flex-basis：项目的默认长度<br><strong>优点：</strong>可以先写center，让他先加载，然后用order属性，把他排到中间的位置</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.left</span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span>0 0 100px<span class="token punctuation">;</span>    <span class="token property">order</span><span class="token punctuation">:</span> 0 <span class="token comment">/*默认为0*/</span><span class="token punctuation">}</span><span class="token selector">.right</span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span>0 0 100px<span class="token punctuation">;</span>    <span class="token property">order</span><span class="token punctuation">:</span>2<span class="token punctuation">}</span><span class="token selector">.center</span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span>1 1 auto<span class="token punctuation">;</span>    <span class="token property">order</span><span class="token punctuation">:</span>1<span class="token punctuation">}</span>&lt;div class=<span class="token string">"container"</span>&gt;    &lt;div class=<span class="token string">"center"</span> style=<span class="token string">"background-color:rgb(9, 134, 236)"</span>&gt;&lt;/div&gt;    &lt;div class=<span class="token string">"left"</span> style=<span class="token string">"background-color:red"</span>&gt;&lt;/div&gt;    &lt;div class=<span class="token string">"right"</span> style=<span class="token string">"background-color:rgb(6, 235, 44)"</span>&gt;&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="table布局"><a href="#table布局" class="headerlink" title="table布局"></a>table布局</h3><p><strong>缺点：</strong>无法设置栏间距</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.left,.center,.right</span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span>table-cell<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.left</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.right</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;div class=<span class="token string">"container"</span>&gt;    &lt;div class=<span class="token string">"left"</span> style=<span class="token string">"background-color:red"</span>&gt;&lt;/div&gt;    &lt;div class=<span class="token string">"center"</span> style=<span class="token string">"background-color:rgb(9, 134, 236)"</span>&gt;&lt;/div&gt;    &lt;div class=<span class="token string">"right"</span> style=<span class="token string">"background-color:rgb(6, 235, 44)"</span>&gt;&lt;/div&gt;&lt;/div&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网格布局-Grid布局"><a href="#网格布局-Grid布局" class="headerlink" title="网格布局(Grid布局)"></a>网格布局(Grid布局)</h3><p><code>grid-template-columns: 100px auto 100px;</code>用于设置网格容器的列属性，其实就相当于列的宽度，当我们需要几列展示时就设置几个值。这个属性可以接收具体数值比如100px 也可以接收百分比值表示占据容器的宽度。<br>需要注意的是: 当给容器设定了宽度时，<code>grid-template-columns</code>设定的百分比值是以容器的宽度值为基础计算的，如果未设置宽度时，会一直向上追溯到设置了宽度的父容器，直到<code>body</code>元素。<br><code>grid-template-rows: 100px;</code>用于设置网格容器的行属性，其实就相当于行的高度，其特性与<code>grid-template-columns</code>属性类似</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span><span class="token punctuation">{</span>         <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>                <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px auto 100px<span class="token punctuation">;</span>                         <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>                <span class="token punctuation">}</span>    &lt;div class=<span class="token string">"container"</span>&gt;    &lt;div class=<span class="token string">"left"</span> style=<span class="token string">"background-color:red"</span>&gt;&lt;/div&gt;    &lt;div class=<span class="token string">"center"</span> style=<span class="token string">"background-color:rgb(9, 134, 236)"</span>&gt;&lt;/div&gt;    &lt;div class=<span class="token string">"right"</span> style=<span class="token string">"background-color:rgb(6, 235, 44)"</span>&gt;&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css常见问题</title>
      <link href="/2022/07/08/202207082/"/>
      <url>/2022/07/08/202207082/</url>
      
        <content type="html"><![CDATA[<h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC 块级格式化上下文"></a>BFC 块级格式化上下文</h2><p><strong>1. 理解</strong><br>BFC是个独立的渲染区域，相当于页面中的一个隔离的独立容器，容器里的标签不会影响到外部标签让空间里的子元素不会影响到外面的布局。</p><p><strong>2. 触发条件</strong></p><ol><li>根元素<code>(html)</code></li><li>浮动 (元素的 <code>float</code> 不是 <code>none</code>)</li><li>块级元素具有<code>overflow</code> ，且值不是 <code>visible</code></li><li>非块级元素具有 <code>display: inline-block，table-cell, table-caption, flex, inline-flex</code></li><li>绝对定位的元素 (元素具有 <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>)</li></ol><h2 id="塌陷问题"><a href="#塌陷问题" class="headerlink" title="塌陷问题"></a>塌陷问题</h2><h3 id="高度塌陷"><a href="#高度塌陷" class="headerlink" title="高度塌陷"></a>高度塌陷</h3><p><strong>1. 理解</strong><br>高度塌陷由浮动引起。子元素设置浮动后，脱离文档流，而父元素未设置高度，此时会导致子元素无法撑起父元素，父元素高度塌陷。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.father</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> #fba<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.son</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 解决方案</strong></p><ol><li>设置父级<code>height</code></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.father</span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #fba<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.son</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>开启<code>BFC</code></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.father</span><span class="token punctuation">{</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #fba<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.son</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>clear:both</code></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.father</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> #fba<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.son</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.son2</span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>伪类：<code>:after</code></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.father</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> #fba<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.son</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.son::after</span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外边距塌陷（外边距合并取最大值）"><a href="#外边距塌陷（外边距合并取最大值）" class="headerlink" title="外边距塌陷（外边距合并取最大值）"></a>外边距塌陷（外边距合并取最大值）</h3><h4 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.father</span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#fba<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.son</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fan-1301414726.cos.ap-nanjing.myqcloud.com/bo.png"></p><h4 id="相邻兄弟关系"><a href="#相邻兄弟关系" class="headerlink" title="相邻兄弟关系"></a>相邻兄弟关系</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.div1</span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#fba<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.div2</span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span> <span class="token comment">/* 合并后取最大值，两个div之间距离为100px */</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决方法</strong></p><ol><li>给父元素添加边框（用于父子关系的塌陷）</li><li>改用<code>padding</code>值（用于父子关系的塌陷）</li><li>开启BFC，例如，父元素加<code>overflow: hidden</code>,定位，浮动，子绝父相等</li></ol>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Router</title>
      <link href="/2022/07/06/20220706/"/>
      <url>/2022/07/06/20220706/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><ol><li><p>React Router 以三个不同的包发布到 npm 上，它们分别为：</p><ol><li>react-router: 路由的核心库，提供了很多的：组件、钩子。</li><li><strong style="color:#dd4d40"><strong>react-router-dom:</strong></strong> <strong style="color:#dd4d40">包含react-router所有内容，并添加一些专门用于 DOM 的组件，例如 <code>&lt;BrowserRouter&gt;</code>等 </strong>。</li><li>react-router-native: 包括react-router所有内容，并添加一些专门用于ReactNative的API，例如:<code>&lt;NativeRouter&gt;</code>等。</li></ol></li><li><p>与React Router 5.x 版本相比，改变了什么？</p><ol><li><p>内置组件的变化：移除<code>&lt;Switch/&gt;</code> ，新增 <code>&lt;Routes/&gt;</code>等。</p></li><li><p>语法的变化：<code>component={About}</code> 变为 <code>element={&lt;About/&gt;}</code>等。</p></li><li><p>新增多个hook：<code>useParams</code>、<code>useNavigate</code>、<code>useMatch</code>等。</p></li><li><p><strong style="color:#dd4d40">官方明确推荐函数式组件了！！！</strong></p><p>……</p></li></ol></li></ol><h2 id="2-Component"><a href="#2-Component" class="headerlink" title="2.Component"></a>2.Component</h2><h3 id="1-lt-BrowserRouter-gt"><a href="#1-lt-BrowserRouter-gt" class="headerlink" title="1. <BrowserRouter>"></a>1. <code>&lt;BrowserRouter&gt;</code></h3><ol><li><p>说明：<code>&lt;BrowserRouter&gt; </code>用于包裹整个应用。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">import React from "react";import ReactDOM from "react-dom";import { BrowserRouter } from "react-router-dom";ReactDOM.render(  &lt;BrowserRouter&gt;    {/* 整体结构（通常为App组件） */}  &lt;/BrowserRouter&gt;,root);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-lt-HashRouter-gt"><a href="#2-lt-HashRouter-gt" class="headerlink" title="2. <HashRouter>"></a>2. <code>&lt;HashRouter&gt;</code></h3><ol><li>说明：作用与<code>&lt;BrowserRouter&gt;</code>一样，但<code>&lt;HashRouter&gt;</code>修改的是地址栏的hash值。</li><li>备注：6.x版本中<code>&lt;HashRouter&gt;</code>、<code>&lt;BrowserRouter&gt; </code> 的用法与 5.x 相同。</li></ol><h3 id="3-lt-Routes-gt-与-lt-Route-gt"><a href="#3-lt-Routes-gt-与-lt-Route-gt" class="headerlink" title="3. <Routes/> 与 <Route/>"></a>3. <code>&lt;Routes/&gt; 与 &lt;Route/&gt;</code></h3><ol><li><p>v6版本中移出了先前的<code>&lt;Switch&gt;</code>，引入了新的替代者：<code>&lt;Routes&gt;</code>。</p></li><li><p><code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code>要配合使用，且必须要用<code>&lt;Routes&gt;</code>包裹<code>&lt;Route&gt;</code>。</p></li><li><p><code>&lt;Route&gt;</code> 相当于一个 if 语句，如果其路径与当前 URL 匹配，则呈现其对应的组件。</p></li><li><p> <code>&lt;Route caseSensitive&gt;</code> 属性用于指定：匹配时是否区分大小写（默认为 false）。</p></li><li><p>当URL发生变化时，<code>&lt;Routes&gt; </code>都会查看其所有子<code> &lt;Route&gt;</code> 元素以找到最佳匹配并呈现组件 。</p></li><li><p> <code>&lt;Route&gt;</code> 也可以嵌套使用，且可配合<code>useRoutes()</code>配置 “路由表” ，但需要通过 <code>&lt;Outlet&gt;</code> 组件来渲染其子路由。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">&lt;Routes&gt;    /*path属性用于定义路径，element属性用于定义当前路径所对应的组件*/    &lt;Route path="/login" element={&lt;Login /&gt;}&gt;&lt;/Route&gt;/*用于定义嵌套路由，home是一级路由，对应的路径/home*/    &lt;Route path="home" element={&lt;Home /&gt;}&gt;       /*test1 和 test2 是二级路由,对应的路径是/home/test1 或 /home/test2*/      &lt;Route path="test1" element={&lt;Test/&gt;}&gt;&lt;/Route&gt;      &lt;Route path="test2" element={&lt;Test2/&gt;}&gt;&lt;/Route&gt;&lt;/Route&gt;//Route也可以不写element属性, 这时就是用于展示嵌套的路由 .所对应的路径是/users/xxx    &lt;Route path="users"&gt;       &lt;Route path="xxx" element={&lt;Demo /&gt;} /&gt;    &lt;/Route&gt;&lt;/Routes&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-lt-Link-gt"><a href="#4-lt-Link-gt" class="headerlink" title="4. <Link>"></a>4. <code>&lt;Link&gt;</code></h3><ol><li><p>作用: 修改URL，且不发送网络请求（路由链接）。</p></li><li><p>注意: 外侧需要用<code>&lt;BrowserRouter&gt;</code>或<code>&lt;HashRouter&gt;</code>包裹。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">import { Link } from "react-router-dom";function Test() {  return (    &lt;div&gt;    &lt;Link to="/路径"&gt;按钮&lt;/Link&gt;    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-lt-NavLink-gt"><a href="#5-lt-NavLink-gt" class="headerlink" title="5. <NavLink>"></a>5. <code>&lt;NavLink&gt;</code></h3><ol><li><p>作用: 与<code>&lt;Link&gt;</code>组件类似，且可实现导航的“高亮”效果。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">// 注意: NavLink默认类名是active，下面是指定自定义的class//自定义样式&lt;NavLink    to="login"    className={({ isActive }) =&gt; {        console.log('home', isActive)        return isActive ? 'base one' : 'base'    }}&gt;login&lt;/NavLink&gt;/*默认情况下，当Home的子组件匹配成功，Home的导航也会高亮，当NavLink上添加了end属性后，若Home的子组件匹配成功，则Home的导航没有高亮效果。*/&lt;NavLink to="home" end &gt;home&lt;/NavLink&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="6-lt-Navigate-gt"><a href="#6-lt-Navigate-gt" class="headerlink" title="6. <Navigate>"></a>6. <code>&lt;Navigate&gt;</code></h3><ol><li><p>作用：只要<code>&lt;Navigate&gt;</code>组件被渲染，就会修改路径，切换视图。</p></li><li><p><code>replace</code>属性用于控制跳转模式（push 或 replace，默认是push）。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">import React,{useState} from 'react'import {Navigate} from 'react-router-dom'export default function Home() {const [sum,setSum] = useState(1)return (&lt;div&gt;&lt;h3&gt;我是Home的内容&lt;/h3&gt;{/* 根据sum的值决定是否切换视图 */}{sum === 1 ? &lt;h4&gt;sum的值为{sum}&lt;/h4&gt; : &lt;Navigate to="/about" replace={true}/&gt;}&lt;button onClick={()=&gt;setSum(2)}&gt;点我将sum变为2&lt;/button&gt;&lt;/div&gt;)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="7-lt-Outlet-gt"><a href="#7-lt-Outlet-gt" class="headerlink" title="7. <Outlet>"></a>7. <code>&lt;Outlet&gt;</code></h3><ol><li><p>当<code>&lt;Route&gt;</code>产生嵌套时，渲染其对应的后续子路由。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">//根据路由表生成对应的路由规则const element = useRoutes([  {    path:'/about',    element:&lt;About/&gt;  },  {    path:'/home',    element:&lt;Home/&gt;,    children:[      {        path:'news',        element:&lt;News/&gt;      },      {        path:'message',        element:&lt;Message/&gt;,      }    ]  }])//Home.jsimport React from 'react'import {NavLink,Outlet} from 'react-router-dom'export default function Home() {return (&lt;div&gt;&lt;h2&gt;Home组件内容&lt;/h2&gt;&lt;div&gt;&lt;ul className="nav nav-tabs"&gt;&lt;li&gt;&lt;NavLink className="list-group-item" to="news"&gt;News&lt;/NavLink&gt;&lt;/li&gt;&lt;li&gt;&lt;NavLink className="list-group-item" to="message"&gt;Message&lt;/NavLink&gt;&lt;/li&gt;&lt;/ul&gt;{/* 指定路由组件呈现的位置 */}&lt;Outlet /&gt;&lt;/div&gt;&lt;/div&gt;)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3.Hooks"></a>3.Hooks</h2><h3 id="1-useRoutes"><a href="#1-useRoutes" class="headerlink" title="1. useRoutes()"></a>1. useRoutes()</h3><ol><li><p>作用：根据路由表，动态创建<code>&lt;Routes&gt;</code>和<code>&lt;Route&gt;</code>。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">//路由表配置：src/routes/index.jsimport About from '../pages/About'import Home from '../pages/Home'import {Navigate} from 'react-router-dom'export default [{path:'/about',element:&lt;About/&gt;},{path:'/home',element:&lt;Home/&gt;},{path:'/',element:&lt;Navigate to="/about"/&gt;}]//App.jsximport React from 'react'import {NavLink,useRoutes} from 'react-router-dom'import routes from './routes'export default function App() {//根据路由表生成对应的路由规则const element = useRoutes(routes)return (&lt;div&gt;......      {/* 注册路由 */}      {element}  ......&lt;/div&gt;)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-useNavigate"><a href="#2-useNavigate" class="headerlink" title="2. useNavigate()"></a>2. useNavigate()</h3><ol><li><p>作用：返回一个函数用来实现编程式导航。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">import React from 'react'import {useNavigate} from 'react-router-dom'export default function Demo() {  const navigate = useNavigate()  const handle = () =&gt; {    //第一种使用方式：指定具体的路径    navigate('/login', {      replace: false,      state: {a:1, b:2}    })     //第二种使用方式：传入数值进行前进或后退，类似于5.x中的 history.go()方法    navigate(-1)  }    return (    &lt;div&gt;      &lt;button onClick={handle}&gt;按钮&lt;/button&gt;    &lt;/div&gt;  )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3-useParams"><a href="#3-useParams" class="headerlink" title="3. useParams()"></a>3. useParams()</h3><ol><li><p>作用：回当前匹配路由的<code>params</code>参数，类似于5.x中的<code>match.params</code>。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">import React from 'react';import { Routes, Route, useParams } from 'react-router-dom';import User from './pages/User.jsx'function ProfilePage() {  // 获取URL中携带过来的params参数  let { id } = useParams();}function App() {  return (    &lt;Routes&gt;      &lt;Route path="users/:id" element={&lt;User /&gt;}/&gt;    &lt;/Routes&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-useSearchParams"><a href="#4-useSearchParams" class="headerlink" title="4. useSearchParams()"></a>4. useSearchParams()</h3><ol><li><p>作用：用于读取和修改当前位置的 URL 中的查询字符串。</p></li><li><p>返回一个包含两个值的数组，内容分别为：当前的seaech参数、更新search的函数。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">import React from 'react'import {useSearchParams} from 'react-router-dom'export default function Detail() {const [search,setSearch] = useSearchParams()const id = search.get('id')const title = search.get('title')const content = search.get('content')return (&lt;ul&gt;&lt;li&gt;&lt;button onClick={()=&gt;setSearch('id=008&amp;title=哈哈&amp;content=嘻嘻')}&gt;点我更新一下收到的search参数&lt;/button&gt;&lt;/li&gt;&lt;li&gt;消息编号：{id}&lt;/li&gt;&lt;li&gt;消息标题：{title}&lt;/li&gt;&lt;li&gt;消息内容：{content}&lt;/li&gt;&lt;/ul&gt;)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-useLocation"><a href="#5-useLocation" class="headerlink" title="5. useLocation()"></a>5. useLocation()</h3><ol><li><p>作用：获取当前 location 信息，对标5.x中的路由组件的<code>location</code>属性。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">import React from 'react'import {useLocation} from 'react-router-dom'export default function Detail() {const x = useLocation()console.log('@',x)  // x就是location对象: /*{      hash: "",      key: "ah9nv6sz",      pathname: "/login",      search: "?name=zs&amp;age=18",      state: {a: 1, b: 2}    }*/return (&lt;ul&gt;&lt;li&gt;消息编号：{id}&lt;/li&gt;&lt;li&gt;消息标题：{title}&lt;/li&gt;&lt;li&gt;消息内容：{content}&lt;/li&gt;&lt;/ul&gt;)}  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="6-useMatch"><a href="#6-useMatch" class="headerlink" title="6. useMatch()"></a>6. useMatch()</h3><ol><li><p>作用：返回当前匹配信息，对标5.x中的路由组件的<code>match</code>属性。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">&lt;Route path="/login/:page/:pageSize" element={&lt;Login /&gt;}/&gt;&lt;NavLink to="/login/1/10"&gt;登录&lt;/NavLink&gt;export default function Login() {  const match = useMatch('/login/:x/:y')  console.log(match) //输出match对象  //match对象内容如下：  /*  {      params: {x: '1', y: '10'}      pathname: "/LoGin/1/10"        pathnameBase: "/LoGin/1/10"      pattern: {      path: '/login/:x/:y',       caseSensitive: false,       end: false      }    }  */  return (  &lt;div&gt;      &lt;h1&gt;Login&lt;/h1&gt;    &lt;/div&gt;  )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="7-useInRouterContext"><a href="#7-useInRouterContext" class="headerlink" title="7. useInRouterContext()"></a>7. useInRouterContext()</h3><p>​            作用：如果组件在 <code>&lt;Router&gt;</code> 的上下文中呈现，则 <code>useInRouterContext</code> 钩子返回 true，否则返回 false。</p><h3 id="8-useNavigationType"><a href="#8-useNavigationType" class="headerlink" title="8. useNavigationType()"></a>8. useNavigationType()</h3><ol><li>作用：返回当前的导航类型（用户是如何来到当前页面的）。</li><li>返回值：<code>POP</code>、<code>PUSH</code>、<code>REPLACE</code>。</li><li>备注：<code>POP</code>是指在浏览器中直接打开了这个路由组件（刷新页面）。</li></ol><h3 id="9-useOutlet"><a href="#9-useOutlet" class="headerlink" title="9. useOutlet()"></a>9. useOutlet()</h3><ol><li><p>作用：用来呈现当前组件中渲染的嵌套路由。</p></li><li><p>示例代码：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">const result = useOutlet()console.log(result)// 如果嵌套路由没有挂载,则result为null// 如果嵌套路由已经挂载,则展示嵌套的路由对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="10-useResolvedPath"><a href="#10-useResolvedPath" class="headerlink" title="10.useResolvedPath()"></a>10.useResolvedPath()</h3><ol><li>作用：给定一个 URL值，解析其中的：path、search、hash值。</li></ol>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> React-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器js事件循环机制</title>
      <link href="/2022/05/14/20220514/"/>
      <url>/2022/05/14/20220514/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript语言特性"><a href="#JavaScript语言特性" class="headerlink" title="JavaScript语言特性"></a>JavaScript语言特性</h3><p>js是单线程的，只能一件事一件事的干，只有一个执行流（主线程）。</p><h4 id="js为什么是单线程的"><a href="#js为什么是单线程的" class="headerlink" title="js为什么是单线程的"></a>js为什么是单线程的</h4><p><code>js</code>作为浏览器的脚本，其最根本的作用就是实现用户与浏览器的交互行为，当一个用户要删除一个A，又同时向A中添加内容的时候，若是多线程，处理会发生冲突，若是单线程就很简单了，用户先执行哪个操作，主线程就先进行哪一个，不会出现任何冲突。</p><h4 id="js为什么需要异步"><a href="#js为什么需要异步" class="headerlink" title="js为什么需要异步"></a>js为什么需要异步</h4><p>如果<code>js</code>中不存在异步。只能自上而下执行。如果上一行解析时间很长。那么下面的代码就会被阻塞。对于用户而言。阻塞就意味着”卡死”。这样就导致了很差的用户体验，所以，<code>js</code>中存在异步执行。</p><h4 id="js如何实现异步操作"><a href="#js如何实现异步操作" class="headerlink" title="js如何实现异步操作"></a>js如何实现异步操作</h4><p>通过事件循环机制</p><h3 id="事件循环机制"><a href="#事件循环机制" class="headerlink" title="事件循环机制"></a>事件循环机制</h3><h4 id="JavaScript中的事件分类"><a href="#JavaScript中的事件分类" class="headerlink" title="JavaScript中的事件分类"></a>JavaScript中的事件分类</h4><ul><li>同步任务：立即执行的任务，在主线程上排队执行，前一个任务执行完毕，才能执行后一个任务；</li><li>异步任务：异步执行的任务，不进入主线程， 而是在异步任务有了结果后，将注册的回调函数放入<strong>任务队列</strong>中等待主线程空闲的时候读取执行</li></ul><h4 id="任务队列分类"><a href="#任务队列分类" class="headerlink" title="任务队列分类"></a>任务队列分类</h4><ul><li>宏任务：<code>macrotask</code>，又称为<code>task</code>, 可以理解为每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）。一般包括：<code>script</code>(整体代码), <code>setTimeout</code>, <code>setInterval</code>, <code>I/O</code>, <code>UI rendering</code>;</li><li>微任务：<code>microtask</code>, 又称为<code>job</code>, 可以理解是在当前 <code>task</code> 执行结束后立即执行的任务。包括：<code>Promise.then/cath /finally</code>回调（平时常见的）、 <code>MutationObserver</code>回调（html5新特性）</li></ul><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><ul><li>一开始整个脚本作为一个宏任务执行</li><li>执行过程中同步代码直接执行，宏任务进入宏任务队列，微任务进入微任务队列</li><li>当前宏任务执行完出队，检查微任务列表，有则依次执行，直到全部执行完</li><li>执行浏览器<code>UI</code>线程的渲染工作</li><li>检查是否有<code>Web Worker</code>任务，有则执行</li><li>执行完本轮的宏任务，回到2，依此循环，直到宏任务和微任务队列都为空</li></ul><p><em>为什么要有微任务呢？</em><br>事件队列是一个“先进先出”的数据结构，排在前面的事件会优先被主线程读取，并不是太灵活，为了适应效率和实时性，引入了微任务。</p><p>事件队列的内容为宏任务，每一个宏任务都会有一个自己的微任务队列，执行完一个宏任务之后不会马上去执行下一个宏任务，而且是查看微任务队列中是否有要执行的微任务，执行完微任务再去执行下一个宏任务</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果</span><span class="token comment">// script1</span><span class="token comment">// promise1</span><span class="token comment">// script2</span><span class="token comment">// promise2</span><span class="token comment">// setTimeout</span><span class="token comment">//执行过程</span><span class="token comment">/**  --- 1. 第一次循环*       --- 1. 首先script（整体代码）开始执行，全局上下文进入到调用栈中*       --- 2. script任务从上往下执行时，先遇到console.log('script1')，入栈执行*       --- 3. 然后继续向下执行，遇到setTimeout，他是一个宏任务源，将他里面的回调函数分配到宏任务队列中（这里我们为了便于直观的查看结果，只移动语句的输出结果）*       --- 4. 继续往下执行遇到了Promise实例，这里要注意，这里是表示Promise构造函数，Promise构造函数是同步执行的，而.then是异步执行的（微任务），所以console.log('promise1')进入调用栈中执行并直接输出，而.then进入到微任务队列*       --- 5. 继续往下执行，读取到console.log('script2');执行*       --- 6. 最后，栈中的代码就执行完了，微任务中只有一个.then了，直接执行  第一次循环结束*  --- 2. 第二次循坏*       ---  从宏任务开始，宏任务中还有一个setTimeOut未执行，所以直接执行即可**/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2022/05/11/20220511/"/>
      <url>/2022/05/11/20220511/</url>
      
        <content type="html"><![CDATA[<h3 id="对调两个变量的多个方法"><a href="#对调两个变量的多个方法" class="headerlink" title="对调两个变量的多个方法"></a>对调两个变量的多个方法</h3><ol><li>临时变量法 (对内存不友好)</li><li>加减法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>数组法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>对象法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span>b<span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span>a<span class="token punctuation">}</span><span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>b<span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>数组运算法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>b <span class="token operator">=</span> a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>按位异或法（计算机底层算法）</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">^</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>解构赋值法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="用二分法查找"><a href="#用二分法查找" class="headerlink" title="用二分法查找"></a>用二分法查找</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">189</span><span class="token punctuation">,</span><span class="token number">254</span><span class="token punctuation">,</span><span class="token number">654</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">searching</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>middle<span class="token punctuation">,</span>element<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>element <span class="token operator">=</span> arr<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token keyword">if</span><span class="token punctuation">(</span>element <span class="token operator">===</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> middle<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> element<span class="token punctuation">)</span><span class="token punctuation">{</span>end <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>start <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">searching</span><span class="token punctuation">(</span><span class="token number">654</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打乱数组内元素顺序"><a href="#打乱数组内元素顺序" class="headerlink" title="打乱数组内元素顺序"></a>打乱数组内元素顺序</h3><p>洗牌算法：<code>Fisher-Yates shuffle</code><br>洗牌：从牌堆里随便抽一张出来，然后放在一边，之后从剩下的牌里重复之前的操作，直到所有牌都被抽出来放到了另一堆中。抽象到代码世界，按相同的做法，就是随机从数组里取出一个元素，保存到另一个数组，然后重复之，直到原数组中所有元素都处理掉</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> ram <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>ram<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>splice</code>来删除数组元素会导致删除位置之后的所有元素要做<code>shift</code>操作来向前补充，从而达到将数组长度减小的目的，这是在后台自动完成的，但这无疑增加了算法的复杂度。所以可以考虑不创建新的数组来保存已经抽取的元素，随机从数组中抽出一个元素，然后与最后个元素交换，相当于把这个随机抽取的元素放到了数组最后面去，表示它已经是被随机过了，同时被换走的那个元素跑到前面去了，会在后续的重复操作中被随机掉。一轮操作过后，下一轮我们只在剩下的<code>n-1</code>个元素也就是数组的前<code>n-1</code>个元素中进行相同的操作，直到进行到第一个。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        t<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token comment">// 如果还剩有元素…</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 随机选取一个元素…</span>        i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 与当前元素进行交换</span>        t <span class="token operator">=</span> array<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>JavaScript</code>可以结合数组自带的<code>sort()</code>方法编写出更简洁的代码来达到目的。但是随着数组元素越多，其随机性会变差</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise对象</title>
      <link href="/2022/05/03/20220503/"/>
      <url>/2022/05/03/20220503/</url>
      
        <content type="html"><![CDATA[<h3 id="引出Promise"><a href="#引出Promise" class="headerlink" title="引出Promise"></a>引出Promise</h3><p>JavaScript为单线程，代码按照顺序从上到下一行一行的执行（同步执行）<br>实际开发中，某些业务的结果我们是不能同步获取的，而等待的结果也是不确定的。比如异步操作 <code>ajax</code> 获取数据，遍历一个大型的数组(同步操作)，还有动态加载脚本文件然后初始化相关业务。<br>解决方案：</p><ol><li>传统解决方案：使用回调函数。回调函数的问题是当我们有很多请求，并且下一个请求要依赖上一个请求的结果，这样会导致我们的请求层层嵌套，使得代码非常臃肿，可读性差，容易产生bug导致所谓的回调地狱。</li><li>使用<code>Promise</code>。异步编程的一种解决方案，比回调函数更合理和更强大。</li></ol><blockquote><p>解决异步的方法<br>1.回调函数(定时器)。<br>2.事件监听。<br>3.发布/订阅。<br>4.Promise对象。(将执行代码和处理结果分开)<br>5.Generator。<br>6.async/await。</p></blockquote><h3 id="理解Promise"><a href="#理解Promise" class="headerlink" title="理解Promise"></a>理解Promise</h3><p>从语法上说，<code>Promise</code> 是一个对象。里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。<code>Promise</code> 提供统一的 <code>API</code>，各种异步操作都可以用同样的方法进行处理。<br>可以把 <code>Promise</code> 看成一个状态机。初始是 <code>pending</code> 状态，可以通过函数 <code>resolve</code> 和 <code>reject</code> ，将状态转变为 <code>fulfilled</code> 或者 <code>rejected</code> 状态，状态一旦改变就不能再次变化。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ol><li>创建<code>Promise</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//异步处理 </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><code>Promise</code>常用方法</li></ol><h4 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h4><p>调用 <code>then</code> 可以为实例注册两种状态的回调函数，当实例的状态为 <code>fulfilled</code>，会触发第一个函数执行,当实例的状态为 <code>rejected</code>，则触发第二个函数执行。</p><ul><li><code>onResolved</code>：状态由 <code>pending</code> 转换成 <code>fulfilled</code> 时执行。</li><li><code>onRejected</code>：状态由 <code>pending</code> 转换成 <code>rejected</code> 时执行。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"resolved"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// resolved3</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"rejected"</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h4><p>catch 只接受一个参数，也就是 <code>rejected</code> 抛出的值，一般用于异常处理。传统的<code>try/catch</code>捕获不了<code>Promise</code>内部的异常的，因为抛出异常这个动作是异步的。<br>在处理异常的时候，我们可以在<code>catch</code>中进行异常的捕获，也可以直接抛出异常。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h4><p><code>finally()</code>方法只有当状态变化的时候才会执行，可以用来做一些程序的收尾工作，比如操作文件的时候关闭文件流。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会执行</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span>onFinally<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">onFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会执行</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span>onFinally<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h4><p><code>Promise</code> 的 <code>all</code> 方法提供了并行执行异步操作的能力，在 <code>all</code> 中所有异步操作结束后才执行回调。将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"p1的第一条输出语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"p1完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"p2的第一条输出语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"p2的第二条输出语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"p2完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"p3的第一条输出语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"p3完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise3<span class="token punctuation">;</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果</span><span class="token comment">/*p1的第一条输出语句*p2的第一条输出语句*       p3的第一条输出语句*       -------两秒钟后输出--------*p2的第二条输出语句*(3) ['p1完成', 'p2完成', 'p3完成']*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新的 <code>Promise</code> 实例<code>p</code>的状态由<code>p1</code>、<code>p2</code>、<code>p3</code>决定，分成两种情况。</p><ul><li>只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，p的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</li><li>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，p的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</li></ul><h4 id="race"><a href="#race" class="headerlink" title="race()"></a>race()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"p1的第一条输出语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"p1完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> promise1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"p2的第一条输出语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"p2完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> promise2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"p3的第一条输出语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"p3完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> promise3<span class="token punctuation">;</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 输出结果</span><span class="token comment">/*p2的第一条输出语句*p2完成*       -------两秒钟后输出--------*p1的第一条输出语句*p3的第一条输出语句*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一个疑问</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 打印结果：A C B D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解答：</p><ul><li>执行 <code>resolve(1)</code>，将处理程序 A 推入微任务队列 1；</li><li>执行 <code>resolve(2)</code>，将处理程序 C 推入微任务队列 2；</li><li>同步任务执行完成，执行微任务队列 1 里的内容，打印 A，A 所在函数执行完成后生成了一个 <code>fulfilled</code> 的新实例，由于新实例状态变化，所以会立即执行 <code>finally()</code> 处理程序 B 推入微任务队列 3；</li><li>执行微任务队列 2 的内容，打印 C，C 所在函数执行完成后，同上条原理会将处理程序 D 推入微任务队列 4；</li><li>执行微任务队列 3 的内容，打印 B；</li><li>执行微任务队列 4 的内容，打印 D；</li><li>代码全部执行完成，最终打印：A C B D。</li></ul>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2022/04/28/20220428/"/>
      <url>/2022/04/28/20220428/</url>
      
        <content type="html"><![CDATA[<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>闭包是可以在另一个函数的外部访问到其作用域中的变量的函数。<br>而被访问的变量可以和外部函数一同存在。<br>即使另一个函数已经运行结束，导致创建变量的环境销毁，也依然会存在，直到访问变量的那个函数被销毁。</p><h3 id="一个简单的闭包"><a href="#一个简单的闭包" class="headerlink" title="一个简单的闭包"></a>一个简单的闭包</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为 闭包</span><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token constant">B</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他使用案例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 修改css的样式</span><span class="token keyword">function</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> setRed <span class="token operator">=</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token keyword">var</span> setBlue <span class="token operator">=</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token keyword">var</span> setYellow <span class="token operator">=</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#button1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> setReddocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#button2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> setBluedocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#button3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> setYellow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*  html结构**  &lt;ul&gt;*  &lt;li&gt;click me&lt;/li&gt;*  &lt;li&gt;click me&lt;/li&gt;*  &lt;li&gt;click me&lt;/li&gt;*  &lt;li&gt;click me&lt;/li&gt;*  &lt;/ul&gt;*/</span><span class="token keyword">var</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> length <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="闭包用来做什么"><a href="#闭包用来做什么" class="headerlink" title="闭包用来做什么"></a>闭包用来做什么</h3><p>闭包常常用来<code>间接访问一个变量</code>。换句话说，<code>隐藏一个变量</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">50</span>window<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num <span class="token operator">+=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span><span class="token function-variable function">sub</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num <span class="token operator">-=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 对于windows来说，将变量num挂在全局不安全</span><span class="token comment">//使用闭包，间接访问变量num，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="经典面试案例"><a href="#经典面试案例" class="headerlink" title="经典面试案例"></a>经典面试案例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 一秒后循环输出 0，1，2，3，4</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法一：使用闭包</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法二：使用let定义关键字</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法三：使用setTimeout第三个参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> j <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/qq_36276528/article/details/70049825">一个讲的很深入的闭包</a></p>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖与节流</title>
      <link href="/2022/04/26/20220426/"/>
      <url>/2022/04/26/20220426/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作用：都是防止函数多次调用。<br>区别：假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的情况会每隔一定时间（参数wait）调用函数。</p></blockquote><h3 id="防抖（debounce）函数"><a href="#防抖（debounce）函数" class="headerlink" title="防抖（debounce）函数"></a>防抖（debounce）函数</h3><h5 id="延迟执行防抖"><a href="#延迟执行防抖" class="headerlink" title="延迟执行防抖"></a>延迟执行防抖</h5><p>简单版的防抖，适用于搜索引擎搜索问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 返回函数连续调用时，总是在一连串函数触发(时间间隔wait)之后调用 * * @param  {function} fn        回调函数 * @param  {number}   wait        表示时间窗口的间隔 * @return {function}             返回客户调用函数 */</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">}</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="立即执行防抖"><a href="#立即执行防抖" class="headerlink" title="立即执行防抖"></a>立即执行防抖</h5><p>总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于wait才会触发</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行 * * @param  {function} fn        回调函数 * @param  {number}   wait        表示时间窗口的间隔 * @param  {boolean}  immediate   设置为ture时，是否立即调用函数 * @return {function}             返回客户调用函数 */</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> timer<span class="token punctuation">,</span> context<span class="token punctuation">,</span> argument<span class="token comment">// 延迟执行函数</span><span class="token keyword">const</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 延迟函数执行完毕，清空缓存的定时器序号</span>timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token comment">// 延迟执行的情况下，函数会在延迟函数中执行</span><span class="token comment">// 使用到之前缓存的参数和上下文</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>context <span class="token operator">=</span> arguments <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token comment">// 这里返回的函数是每次实际调用的函数</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果没有创建延迟执行函数（later），就创建一个</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>timer <span class="token operator">=</span> <span class="token function">later</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 如果是立即执行，调用函数</span><span class="token comment">// 否则缓存参数和调用上下文</span><span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>context <span class="token operator">=</span> <span class="token keyword">this</span>arguments <span class="token operator">=</span> params<span class="token punctuation">}</span><span class="token comment">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span><span class="token comment">// 这样做延迟函数会重新计时</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>timer <span class="token operator">=</span> <span class="token function">later</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节流（throttle）函数"><a href="#节流（throttle）函数" class="headerlink" title="节流（throttle）函数"></a>节流（throttle）函数</h3><p>将多次执行变成每隔一段时间执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param  {function}   func      回调函数 * @param  {number}     wait      表示时间窗口的间隔 * @param  {object}     options   如果想忽略开始函数的的调用，传入{leading: false}。 *                                如果想忽略结尾函数的调用，传入{trailing: false} *                                两者不能共存，否则函数不能执行 * @return {function}             返回客户调用函数 */</span><span class="token keyword">function</span> <span class="token function">throttle</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> context<span class="token punctuation">,</span> args<span class="token punctuation">,</span> result<span class="token punctuation">;</span><span class="token keyword">var</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 之前的时间戳</span><span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 如果 options 没传则设为空对象</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 定时器回调函数</span><span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果设置了 leading，就将 previous 设为 0</span><span class="token comment">// 用于下面函数的第一个 if 判断</span>previous <span class="token operator">=</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 置空一是为了防止内存泄漏，二是为了下面的定时器判断</span>timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 获得当前时间戳</span><span class="token keyword">var</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 首次进入前者肯定为 true</span><span class="token comment">// 如果需要第一次不执行函数</span><span class="token comment">// 就将上次时间戳设为当前的</span><span class="token comment">// 这样在接下来计算 remaining 的值时会大于0</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now<span class="token punctuation">;</span><span class="token comment">// 计算剩余时间</span><span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>args <span class="token operator">=</span> arguments<span class="token punctuation">;</span><span class="token comment">// 如果当前调用已经大于上次调用时间 + wait</span><span class="token comment">// 或者用户手动调了时间</span><span class="token comment">// 如果设置了 trailing，只会进入这个条件</span><span class="token comment">// 如果没有设置 leading，那么第一次会进入这个条件</span><span class="token comment">// 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了</span><span class="token comment">// 其实还是会进入的，因为定时器的延时</span><span class="token comment">// 并不是准确的时间，很可能你设置了2秒</span><span class="token comment">// 但是他需要2.2秒才触发，这时候就会进入这个条件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">&gt;</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果存在定时器就清理掉否则会调用二次回调</span><span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>previous <span class="token operator">=</span> now<span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>trailing <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 判断是否设置了定时器和 trailing</span><span class="token comment">// 没有的话就开启一个定时器</span><span class="token comment">// 并且不能不能同时设置 leading 和 trailing</span>timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由Router学习笔记</title>
      <link href="/2022/04/20/20220420/"/>
      <url>/2022/04/20/20220420/</url>
      
        <content type="html"><![CDATA[<h4 id="相关理解"><a href="#相关理解" class="headerlink" title="相关理解"></a>相关理解</h4><h5 id="vue-router的理解"><a href="#vue-router的理解" class="headerlink" title="vue-router的理解"></a>vue-router的理解</h5><p>vue 的一个插件库，专门用来实现 SPA 应用</p><h5 id="SPA的理解"><a href="#SPA的理解" class="headerlink" title="SPA的理解"></a>SPA的理解</h5><ol><li>单页 Web 应用（single page web application，SPA）</li><li>整个应用只有一个完整的页面</li><li>点击页面中的导航链接不会刷新页面，只会做页面的局部更新。</li><li>数据需要通过 ajax 请求获取。</li></ol><h4 id="路由的简单使用"><a href="#路由的简单使用" class="headerlink" title="路由的简单使用"></a>路由的简单使用</h4><ol><li>安装 <code>npm i vue-router@3</code><blockquote><p>2022年2月7日，Vue3成为默认框架，<code>npm i vue</code>命令将下载vue3版本<br>vue-router 更新至 vue-router4 版本 ， <code>npm i vue-router</code>将下载vue-router4版本<br>vue2 使用 vue-router3 </p></blockquote></li><li>引入 <code>import VueRouter from 'vue-router'</code></li><li>使用 <code>Vue.use(VueRouter)</code></li><li>编写router配置项</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//src文件夹下新建 router/index.js</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">//引入需要进行跳转的路由组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token comment">//创建router实例对象，去管理一组一组的路由规则</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/About'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>About<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/Home'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//暴露router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token comment">//main.js配置</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span><span class="token operator">=&gt;</span><span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>router<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>实现切换（active-class可配置高亮样式）</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>指定展示位置</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h4><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存放着自己的路由信息。</li><li>整个应用只有一个<code>router</code>，可以通过组件的<code>$router</code>属性获取到。</li></ol><h4 id="多级路由"><a href="#多级路由" class="headerlink" title="多级路由"></a>多级路由</h4><ol><li>配置路由规则，使用children配置项</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>About<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>  <span class="token comment">//此处一定不能写/news</span><span class="token literal-property property">component</span><span class="token operator">:</span>News<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Message<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>跳转（要写完整路径）</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home/news<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>News<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h4><ol><li>传递参数</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home/message/detail?id=001&amp;title=你好<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{path:<span class="token punctuation">'</span>/home/message/detail<span class="token punctuation">'</span>,query:{id:001,title:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接收参数</li></ol><pre class="line-numbers language-none"><code class="language-none">$route.query.id$route.query.title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><ol><li><p>作用：可以简化路由的跳转</p></li><li><p>如何使用</p><ol><li>路由命名</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>Demo<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">{</span>   <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'test'</span><span class="token punctuation">,</span>   <span class="token literal-property property">component</span><span class="token operator">:</span>Test<span class="token punctuation">,</span>   <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>   <span class="token punctuation">{</span>   <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'ming'</span><span class="token punctuation">,</span>  <span class="token comment">//给路由命名</span>   <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span>   <span class="token literal-property property">component</span><span class="token operator">:</span>Hello<span class="token punctuation">,</span>   <span class="token punctuation">}</span>   <span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>简化跳转<pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token comment">&lt;!-- 简化前，需要写完整的路径 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>/demo/test/hello<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 简化后，直接通过名字跳转 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>ming<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 简化写法配合传递参数 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>  <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{   name:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>,   query:{   id:0101,   title:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>   }   }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h4 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h4><ol><li>配置路由，声明接收的params参数<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>Demo<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">{</span>   <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'test'</span><span class="token punctuation">,</span>   <span class="token literal-property property">component</span><span class="token operator">:</span>Test<span class="token punctuation">,</span>   <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>   <span class="token punctuation">{</span>   <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'ming'</span><span class="token punctuation">,</span>  <span class="token comment">//给路由命名</span>   <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'hello/:id/:title'</span><span class="token punctuation">,</span>  <span class="token comment">//使用占位符声明接收params参数</span>   <span class="token literal-property property">component</span><span class="token operator">:</span>Hello<span class="token punctuation">,</span>   <span class="token punctuation">}</span>   <span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>传递参数<pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token comment">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>/demo/test/hello/0101/你好<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>ming<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 简化写法配合传递参数 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>  <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{   name:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>,   params:{   id:0101,   title:<span class="token punctuation">'</span>你好<span class="token punctuation">'</span>   }   }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><strong>注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置</strong></li><li>接收参数<br><code>$route.params.id</code><br><code>$route.params.title</code></li></ol><h4 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h4><p>作用：让路由组件更方便的收到参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail/:id'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Detail<span class="token punctuation">,</span><span class="token comment">// 第一种写法：props值为对象，该对象中所有的key-value的组合最终会通过props传给Detail组件</span><span class="token comment">// props：{a: 900}</span><span class="token comment">// 第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span><span class="token comment">// props：true</span><span class="token comment">// 第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span><span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="router-link-的replace属性"><a href="#router-link-的replace属性" class="headerlink" title="router-link 的replace属性"></a>router-link 的replace属性</h4><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史纪录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时默认为<code>push</code>。</li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace ······&gt;新闻&lt;/router-link&gt;</code></li></ol><h4 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h4><ol><li>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</li><li>具体编码<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//$router的两个API</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token literal-property property">id</span><span class="token operator">:</span>xxx  <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"xxx"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token literal-property property">id</span><span class="token operator">:</span>xxx  <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"xxx"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//前进</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//后退</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//可前进也可后退</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h4><ol><li>作用：让不展示的路由组件保持挂载，不被销毁</li><li>具体编码<pre class="line-numbers language-html" data-language="html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>News<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h4><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态</li><li>具体名字<ol><li><code>activated</code>路由组件被激活时触发</li><li><code>deactivated</code>路由组件失活时触发</li></ol></li></ol><h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h4><ol><li>作用：对路由进行权限判断</li><li>分类：全局路由、独享路由、组件内路由</li><li>全局路由：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//全局前置守卫，初始化时执行，每次路由切换前执行</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//判断当前路由是否需要进行权限控制</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">'zf'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//权限控制的具体规则</span>   <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//放行</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"无权限查看"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//放行</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title  <span class="token comment">//修改网页的title</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'vue_test'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>独享路由<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>Demo<span class="token punctuation">,</span> <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">isAuth</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token function">beforeEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">'zf'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//权限控制的具体规则</span>   <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//放行</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"无权限查看"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>组件内守卫<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//进入守卫：通过路由规则，进入该组件时被调用</span><span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment">//离开守卫：通过路由规则，离开该组件时被调用</span><span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node介绍</title>
      <link href="/2022/04/15/20220415/"/>
      <url>/2022/04/15/20220415/</url>
      
        <content type="html"><![CDATA[<h3 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h3><p>一个基于 <code>chrome v8</code> 引擎的<code>javascript</code>运行环境</p><h3 id="Node-js特点"><a href="#Node-js特点" class="headerlink" title="Node.js特点"></a>Node.js特点</h3><p>优点</p><ul><li>异步非阻塞的I/O（I/O线程池）</li><li>特别适用于I/O密集型应用（对比java传统服务器）</li><li>事件循环模型（独有的一套，和浏览器不一样）</li><li>单线程（成也单线程，败也单线程）</li><li>跨平台（几乎所有的语言都支持）</li></ul><p>不足之处</p><ul><li>回调函数嵌套太多，太深（俗称回调地狱）</li><li>单线程，处理不好CPU密集型任务</li></ul><h3 id="Node-js应用场景"><a href="#Node-js应用场景" class="headerlink" title="Node.js应用场景"></a>Node.js应用场景</h3><ol><li><code>web</code>服务<code>API</code>(本身没有太多逻辑，只需要请求<code>API</code>,组织数据进行返回即可)</li><li>服务器渲染页面，提升速度。</li><li>后端的<code>Web</code>服务，例如跨域、服务端的请求</li></ol><h3 id="Node-js与浏览器端比较"><a href="#Node-js与浏览器端比较" class="headerlink" title="Node.js与浏览器端比较"></a>Node.js与浏览器端比较</h3><ol><li><p>浏览器端，js由哪几部分组成?</p><ol><li>BOM —-&gt; window浏览器对象模型，很多的API (location，history)</li><li>DOM —-&gt; document文档对象模型 ———-很多的API（对DOM的增删改查)</li><li>ES规范——————– ES5、ES6</li></ol></li><li><p>Node端，js由几部分组成?</p><ol start="4"><li>没有了<code>BOM</code> —–&gt;因为服务器不需要（服务端没有浏览器对象）</li><li>没有了<code>DOM</code> —–&gt;因为没有浏览器窗口</li><li>几乎包含了所有的<code>ES</code>规范</li><li>没有了<code>window</code>，但是取而代之的是一个叫做<code>gLobal</code>的全局变量。<br>在<code>Node</code>中禁止函数的<code>this</code>指向<code>gLobal</code>，而是指向了一个空对象<code>console.log(this)</code></li></ol></li></ol><h3 id="事件循环模型"><a href="#事件循环模型" class="headerlink" title="事件循环模型"></a>事件循环模型</h3><ol><li>第一个阶段：<code>timers</code>（定时器阶段–<code>setTimeout</code>,<code>setInterval</code>）<ol><li>开始计时</li><li>执行定时器的回调</li></ol></li><li>第二个阶段：<code>pending callbacks</code>(系统阶段)</li><li>第三个阶段：<code>idle</code>,<code>prepare</code>(准备阶段)</li><li>第四个阶段：<code>poll</code>(轮询阶段，核心)<ul><li>如果回调队列里有待执行的回调函数，从回调队列中取出回调函数，同步执行(一个一个执行)，直到回调队列为空了，或者达到系统最大限度</li><li>如果回调队列为空<ul><li>如果有设置过<code>setImmediate</code>,进入下一个<code>check</code>阶段，为了执行<code>setImmediate</code>所设置的回调</li><li>如果未设置过<code>setImmediate</code>,在此阶段停留，等待回调函数被插入回调队列，若定时器到点了，进入下一个<code>check</code>阶段</li></ul></li></ul></li><li>第五个阶段：<code>check</code>(专门用于执行<code>setImmediate</code>所设置的回调)</li><li>第六个阶段：<code>close callbacks</code></li></ol><p><code>process.nextTick()</code>  用于设置立即执行函数（在任意阶段优先执行）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//延迟定时器</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setTimeout所指定的回调函数被执行"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//立即执行函数</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setImmediate所指定的回调函数被执行"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//立即执行函数</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"process.nextTick所指定的回调函数被执行"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是主线程上的代码"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Buffer缓冲器"><a href="#Buffer缓冲器" class="headerlink" title="Buffer缓冲器"></a>Buffer缓冲器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建一个Buffer的实例对象--------性能特别差</span><span class="token comment">// 1.在堆中开空间   2.清理</span><span class="token keyword">let</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token comment">//创建一个Buffer的实例对象--------性能比new Buffer()稍强一点</span><span class="token comment">// 在堆里开辟一块空间（该块空间没有人用过）</span><span class="token keyword">let</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token comment">//创建一个Buffer的实例对象-------性能最好的</span><span class="token comment">// 1.输出的Buffer里有大于1的?  输出的是16进制，存储的是二进制</span><span class="token comment">// 2.输出的Buffer不为空?  残留数据</span><span class="token keyword">let</span> buf3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">allocUnsafe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf3<span class="token punctuation">)</span><span class="token comment">//将数据存入一个Buffer实例</span><span class="token keyword">let</span> buf4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 1.输出的为什么不是我们曾经存入的字符串?     用户存储的不一定是字符串，可能是媒体类型的文件</span><span class="token comment">// 2.如何能够让输出的东西是字符串(我们能看懂的)?      tostring()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Node-js中的文件操作"><a href="#Node-js中的文件操作" class="headerlink" title="Node.js中的文件操作"></a>Node.js中的文件操作</h3><ol><li>NodeJs中有一个文件系统，所谓的文件系统，就是对计算机中的文件进行增删改查等操作。</li><li>在NodeJs中，给我们提供了一个模块，叫做<code>fs</code>模块(文件系统)，专门用于操作文件。</li><li>fs模块是Node的核心模块，使用的时候，无需下载，直接引入。</li></ol><h5 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h5><ol><li>异步文件写入（简单文件写入）<br>fs.writeFile(file, data[,options], callback)</li></ol><p>——-file:要写入的文件路径+文件名+后缀<br>——-data:要写入的数据<br>——-options:配置对象(可选参数)<br>————-encoding:设置文件的编码方式，默认值: utf8(万国码)<br>————-mode:设置文件的操作权限，默认值是:0o666<br>——————–0o111:文件可被执行的权限<br>——————–0o222:文件可被写入的权限<br>——————–0o444:文件可别读取的权限<br>————-fLag<br>——-callback:回调函数<br>————-err:错误对象</p><p>Node原则:错误优先</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入内置的fs模块</span><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">'fs '</span><span class="token punctuation">)</span><span class="token comment">//调用writeFile方法</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span> <span class="token string">'./demo.jpg'</span><span class="token punctuation">,</span><span class="token string">'美女'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入失败'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>流式文件写入</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">'fs '</span><span class="token punctuation">)</span><span class="token comment">//创建一个可写流----水管到位了</span><span class="token keyword">let</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">'/demo.txt'</span> <span class="token punctuation">)</span><span class="token comment">//检测流的状态</span>ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可写流打开了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可写流关闭了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//使用可写流写入数据</span>ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'美女?\n'</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'霉女?\n'</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>"到底是哪一个<span class="token operator">?</span>\n'<span class="token punctuation">)</span>ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h5><ol><li>简单文件读取</li></ol><p>fs.readFiLe(path[,options],calLback)<br>——-path:要读取文件的路径+文件名+后缀<br>——-options:配置对象（可选)<br>——-calLback :回调<br>————-err:错误对象<br>————-data:读取出来的数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">'fs '</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>_dirname<span class="token operator">+</span><span class="token string">' /test.mp4'</span> <span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span> <span class="token string">'../haha.mp4'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 为什么读取出来的东西是Buffer?</span><span class="token comment">// 用户存储的不一定是纯文本</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>流式文件读取<br>fs.createReadStream(path[,options])</li></ol><p>——-path:-是都区的文件路径+文件名+后缀<br>——-options:<br>————-flags<br>————-encoding<br>————-fd<br>————-mode<br>————-autoClose<br>————-emitcLose<br>————-start<br>————-end<br>————-highlwaterMark:每次读取数据的大小，默认值是64*1024</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span>createReadStream<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">'fs '</span><span class="token punctuation">)</span><span class="token comment">//创建一个可读流</span><span class="token keyword">let</span> rs <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span>_dirname<span class="token operator">+</span><span class="token string">'/test.mp4'</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token literal-property property">highwaterMark</span><span class="token operator">:</span><span class="token number">10</span> <span class="token operator">*</span><span class="token number">1024</span> <span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//只要用到了流，就必须监测流的状态</span>rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可读流打开了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可读流关闭了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Node-js下的包和包管理器"><a href="#Node-js下的包和包管理器" class="headerlink" title="Node.js下的包和包管理器"></a>Node.js下的包和包管理器</h3><h5 id="什么是包"><a href="#什么是包" class="headerlink" title="什么是包"></a>什么是包</h5><p>我们电脑上的文件夹，包含了 某些特定的文件，符合了某些特定的结构，就是一个包。</p><h5 id="一个标准的包，应该包含哪些内容？"><a href="#一个标准的包，应该包含哪些内容？" class="headerlink" title="一个标准的包，应该包含哪些内容？"></a>一个标准的包，应该包含哪些内容？</h5><ul><li>package.json 描述文件(包的“说明书”，必须包含的，其他可以省略)</li><li>bin 可执行二进制文件</li><li>lib 经过编译后的<code>js</code>代码</li><li>doc 文档（说明文档，bug修复文档，版本变更记录文档）</li><li>test 单元测试报告</li></ul><h5 id="如何让一个普通文件夹变成一个包？"><a href="#如何让一个普通文件夹变成一个包？" class="headerlink" title="如何让一个普通文件夹变成一个包？"></a>如何让一个普通文件夹变成一个包？</h5><p>让这个文件夹拥有一个<code>package.json</code>文件即可，且<code>package.json</code>里面的内容要合法<br>执行命令：<code>npm init</code></p><h5 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h5><p>【移除】<br>【安装】</p><ol><li><code>npm install xxx -save</code> 或 <code>npm install xxx</code></li><li><code>npm install xxx -save -dev</code> 安装包将写入到 开发依赖 中</li><li><code>npm i xxx -g</code> 全局安装xxx包 查看全局安装的位置：<code>npm root -g</code></li><li><code>npm i xxx@yyy</code> 安装xxx包的yyy版本</li><li><code>npm i</code> 安装<code>package.json</code>中声明的所有包</li></ol><p>【移除】<br><code>npm remove xxx</code>  在<code>node_module</code>中删除xxx包，同时会删除该包在<code>package.json</code>中的声明</p><p>【其他命令】</p><ol><li><code>npm aduit fix</code>  检测项目依赖中的一些问题，并且尝试着修复</li><li><code>npm view xxx versions</code>  查看<code>npm</code>仓库中xxx包的所有版本信息</li><li><code>npm view xxx version</code>  查看<code>npm</code>仓库中xxx包的最新版本</li><li><code>npm ls xxx</code>  查看我们所安装的xxx包的版本</li></ol><p>【关于版本号的说明】<br><code>^3.x.x</code>: 锁定大版本，以后安装包的时候，保证包是3.x.x版本，x默认取最新的。<br><code>~3.1.x</code>: 锁定小版本，以后安装包的时候，保证包是3.1.x版本，x默认取最新的。<br><code>3.1.1</code>: 锁定完整版本，以后安装包的时候，保证包必须是3.1.1版本。</p>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> 模块化开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex学习笔记</title>
      <link href="/2022/04/14/20220414/"/>
      <url>/2022/04/14/20220414/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍vuex"><a href="#介绍vuex" class="headerlink" title="介绍vuex"></a>介绍vuex</h4><ol><li><code>vuex</code>是什么<br>vuex : 专门在vue中实现<code>集中式</code>状态（数据）管理的一个<code>vue</code>插件，对<code>vue</code>应用中的多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</li><li>什么时候用<code>vuex</code><ul><li>多个组件依赖同一状态。</li><li>来自不同组件的行为需要变更为同一状态。</li></ul></li></ol><h4 id="vuex工作原理图"><a href="#vuex工作原理图" class="headerlink" title="vuex工作原理图"></a>vuex工作原理图</h4><p><img src="https://s2.loli.net/2022/03/04/ckaAqND7uQXHw6S.png"></p><h4 id="搭建vuex环境"><a href="#搭建vuex环境" class="headerlink" title="搭建vuex环境"></a>搭建vuex环境</h4><ol><li><p>安装插件 <code>npm i vuex@3</code></p><blockquote><p>2022年2月7日，Vue3成为默认框架，<code>npm i vue</code>命令将下载vue3版本<br>vuex 更新至 vuex4 版本 ， <code>npm i vuex</code>将下载vuex4版本<br>vue2 使用 vuex3 ，vue3 使用 vuex4</p></blockquote></li><li><p>引入 <code>import Vuex from 'vuex'</code></p></li><li><p>使用 <code>Vue.use(vuex)</code>  ===&gt; 所有的<code>vc</code>,<code>vm</code>上都有了一个<code>$store</code></p></li><li><p>在 src 文件夹下新建文件夹 store，新建文件 index.js，在该文件中创建store。</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//该文件用于创建Vuex中最为核心的store</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">//actions 用于响应组件中的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token function">jiaOdd</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//context 相当于一个简化的store</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'actions中的jiaOdd被调用了'</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>sum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token function">jiaWait</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'actions中的jiaWait被调用了'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//mutations 用于操作数据（state）</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token constant">JIA</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mutations中的JIA被调用了'</span><span class="token punctuation">)</span>state<span class="token punctuation">.</span>sum <span class="token operator">+=</span> value<span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token constant">JIAN</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mutations中的JIAN被调用了'</span><span class="token punctuation">)</span>state<span class="token punctuation">.</span>sum <span class="token operator">-=</span> value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//state 用于存储数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">sum</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>actions<span class="token punctuation">,</span>mutations<span class="token punctuation">,</span>state<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//main.js文件</span><span class="token comment">//引入Vue</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入App</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token comment">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token comment">//关闭Vue的生产提示</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>store<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//子组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'Count'</span><span class="token punctuation">,</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIAN'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">incrementOdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">incrementWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'jiaWait'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Count'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getters配置项"><a href="#getters配置项" class="headerlink" title="getters配置项"></a>getters配置项</h4><p>想要读取共享数据上的计算属性，且逻辑复杂且想要复用，可以使用getters配置项。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//该文件用于创建Vuex中最为核心的store</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">//actions 用于响应组件中的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment">//mutations 用于操作数据（state）</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment">//state 用于存储数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">sum</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">//getters 类似于计算属性</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum<span class="token operator">*</span><span class="token number">10</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>actions<span class="token punctuation">,</span>mutations<span class="token punctuation">,</span>state<span class="token punctuation">,</span>   getters<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vuex优化"><a href="#vuex优化" class="headerlink" title="vuex优化"></a>vuex优化</h4><ol><li>mapState 方法：用于映射<code>state</code>中的数据作为计算属性</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token comment">//借助mapState生成计算属性，sum, school, subject (对象写法)</span>   <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">sum</span><span class="token operator">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token literal-property property">school</span><span class="token operator">:</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token literal-property property">subject</span><span class="token operator">:</span><span class="token string">'subject'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">//借助mapState生成计算属性，sum, school, subject (数组写法)</span>   <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>mapGetters 方法：用于映射<code>getter</code>中的数据作为计算属性</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token comment">//借助mapGetters生成计算属性，bigSum (对象写法)</span>   <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">bigSum</span><span class="token operator">:</span><span class="token string">'bigSum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">//借助mapGetters生成计算属性，bigSum (数组写法)</span>   <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>mapActions 方法：用于帮助生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>   <span class="token comment">//靠mapActions生成：incrementOdd,incrementWait(对象形式)</span>   <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">incrementOdd</span><span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token literal-property property">incrementWait</span><span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">//靠mapActions生成：incrementOdd,incrementWait(数组形式)</span>   <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>mapMutations 方法：用于帮助生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>   <span class="token comment">//靠mapMutations生成：increment,increment(对象形式)</span>   <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">increment</span><span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token literal-property property">increment</span><span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">//靠mapMutations生成：increment,increment(数组形式)</span>   <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vuex模块化"><a href="#vuex模块化" class="headerlink" title="vuex模块化"></a>vuex模块化</h4><ol><li>目的：让代码更好维护，让多种数据分类更加明确。</li><li>修改<code>store.js</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">namespaced</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//开启命名空间</span>   <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">sum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"zf"</span><span class="token punctuation">,</span>      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//开启命名空间</span>   <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function">firstPersonName</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> state<span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token literal-property property">moudles</span><span class="token operator">:</span> <span class="token punctuation">{</span>      countAbout<span class="token punctuation">,</span>      personAbout   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>开启命名空间后，组件中读取<code>state</code>数据<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment">//方式二：借助mapState读取</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>开启命名空间后，组件中读取<code>getters</code>数据<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personAbout/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment">//方式二：借助mapGetters读取</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>开启命名空间后，组件中调用<code>dispatch</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/add'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapActions读取</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">incrementOdd</span><span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token literal-property property">incrementWait</span><span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>开启命名空间后，组件中调用<code>commit</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapMutations读取</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">increment</span><span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token literal-property property">increment</span><span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2学习笔记</title>
      <link href="/2022/02/27/20220227/"/>
      <url>/2022/02/27/20220227/</url>
      
        <content type="html"><![CDATA[<h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2 id="render函数（渲染）"><a href="#render函数（渲染）" class="headerlink" title="render函数（渲染）"></a>render函数（渲染）</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入的是残缺版（精简版）的vue，缺失模板解析器</span><span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span><span class="token operator">=&gt;</span><span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h2><ol><li>查看默认配置<br>显示隐藏的默认配置文件 <code>Vue inspect &gt; output.js</code> ==&gt; 生成output.js文件 只可查看，不可以修改</li><li>个性化定制脚手架<br>新建 <code>Vue.config.js</code>文件<br>与核心文件整合，以修改文件为主<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">pages</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token literal-property property">index</span><span class="token operator">:</span><span class="token punctuation">{</span>   <span class="token comment">//入口</span>   <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">'src/main.js'</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">lintOnSave</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//关闭语法检查</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>插件：本质上是一个对象（该对象必须包含<code>install</code>方法）</p><ol><li>定义插件<br>创建plugin.js文件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//a: vue的构造函数</span>  <span class="token comment">//也可以传递其他参数</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>引入插件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> plugins <span class="token keyword">from</span> <span class="token string">'./plugins'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用插件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>注意：插件中放什么</strong></p><ul><li>全局过滤器</li><li>定义全局指令</li><li>定义混入</li><li>给Vue原型上添加一个方法 <code>Vue.prototype.hello = ()={}</code></li></ul><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><p>获取DOM元素，通过id名获取，Vue避免操作DOM ===&gt; 使用ref</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//标签添加ref属性</span><span class="token operator">&lt;</span>h1 ref <span class="token operator">=</span> <span class="token string">'title'</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>title<span class="token comment">//在vc组件实例对象中获取真实DOM元素</span><span class="token comment">//组件添加ref属性</span><span class="token operator">&lt;</span>Zujian ref <span class="token operator">=</span> <span class="token string">'name'</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>name<span class="token comment">//获取的是Zujian的实例对象，而不是真实的DOM元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p>多个组件共享一个配置，组件复用代码</p><ol><li>定义混合<br>创建mixin.js文件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> hunru <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token literal-property property">xxx</span><span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是共享的文件"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>引用混入<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>hunru<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./mixin'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用混合<ul><li>全局混入<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//在main.js文件中添加，所有组件实例对象将添加混入</span>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>hunru<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>局部混入<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//给某个组件对象vc添加混入</span><span class="token literal-property property">mixin</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'hunru'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>父组件对子组件传参，子组件接受参数使用<code>props</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//父组件传参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token attr-name">sex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//子组件props接收有三种写法</span><span class="token comment">//第一种 ===&gt; 简单接收</span><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'参数1'</span><span class="token punctuation">,</span><span class="token string">'参数2'</span><span class="token punctuation">,</span><span class="token string">'参数3'</span><span class="token punctuation">]</span><span class="token comment">//第二种 ===&gt; 限制类型</span><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">参数</span><span class="token operator">:</span> 类型<span class="token punctuation">}</span><span class="token comment">//第三种 ===&gt; 限制类型 + 限制必要性 + 指定默认值</span><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">参数</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> 类型<span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：prop是单向数据流，不建议修改，因为没有_data，无法做数据代理。如果要修改，data里面接收一下。如果prop与data中的属性冲突，以prop的数据为主，prop的优先级高于data。</strong></p><h2 id="组件自定义事件"><a href="#组件自定义事件" class="headerlink" title="组件自定义事件"></a>组件自定义事件</h2><h3 id="绑定自定义事件"><a href="#绑定自定义事件" class="headerlink" title="绑定自定义事件"></a>绑定自定义事件</h3><p>父给子传参数 ===&gt; <code>props</code><br>子给父传参数 ===&gt; </p><ol><li>使用<code>props</code>，父给子提前传递一个回调函数，子组件调用函数时传递参数。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//父组件</span><span class="token operator">&lt;</span>School <span class="token operator">:</span>getSchoolName <span class="token operator">=</span> <span class="token string">"getschoolname"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token comment">//父组件实例对象上配置methods</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token function">getschoolname</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'父组件收到了学校名：'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//子组件</span><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'getschoolname'</span><span class="token punctuation">]</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function">sendschoolname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//调用函数，传递参数</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getschoolname</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用自定义事件<br>方法一：直接绑定自定义事件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//父组件</span><span class="token comment">//在父组件中给子组件绑定自定义事件，v-on在谁身上给谁的组件实例对象绑定自定义事件，需要在student组件上触发自定义事件</span><span class="token operator">&lt;</span>Student v<span class="token operator">-</span>on<span class="token operator">:</span>zidingyi<span class="token operator">=</span><span class="token string">"getstudentname"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>Student<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token comment">//父组件中的回调函数</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function">getstudentname</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//子组件</span><span class="token comment">//在子组件上触发自定义事件</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function">chufazidingyi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"zidingyi"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>方法二：灵活绑定自定义事件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//父组件</span><span class="token operator">&lt;</span>Student ref<span class="token operator">=</span><span class="token string">"student"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>Student<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token comment">//挂载完毕后绑定</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"zidingyi"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>getstudentname<span class="token punctuation">)</span> <span class="token comment">//灵活绑定，如可实现等待几秒后绑定</span> <span class="token comment">// this.$refs.student.$once('zidingyi',this.getstudentname) //绑定自定义事件（一次性）</span><span class="token punctuation">}</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function">getstudentname</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//子组件同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="解绑自定义事件"><a href="#解绑自定义事件" class="headerlink" title="解绑自定义事件"></a>解绑自定义事件</h3><p>在子组件中解绑自定义事件(触发事件<code>$emit</code>，解绑事件<code>$off</code>)</p><ul><li>解绑一个 <code>this.$off("zidingyi1")</code></li><li>解绑多个 <code>this.$off(["zidingyi1","zidingyi2"])</code></li><li>全部解绑 <code>this.$off()</code></li></ul><h5 id="自定义事件使用时的两个问题"><a href="#自定义事件使用时的两个问题" class="headerlink" title="自定义事件使用时的两个问题"></a>自定义事件使用时的两个问题</h5><ul><li><code>this</code>的指向问题<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token function">getstudentname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"zidingyi"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>getstudentname<span class="token punctuation">)</span><span class="token comment">//此时自定义事件给student组件绑定，所以，this指向的是student子组件</span><span class="token comment">//但是这里不会出错，是因为与getstudentname里的this（父组件实例对象）发生了冲突，以gentstudentname中的this为主</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"zidingyi"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//这个this为子组件</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"zidingyi"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//使用箭头函数，this指向父组件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>组件调用原生事件<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getstudentname<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span> <span class="token attr-name">@click.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getstudentname<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">/&gt;</span></span>//如果不加native，那么vue就不认识click指令，将它当作自定义指令来处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><p>实现任意组件间通信。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>A组件想获得B组件的数据 ===&gt;<br>在A组件中给总线（$bus）绑定自定义事件，回调函数留在A组件。<br>B组件触发自定义事件并传参</p><h3 id="总线的特点"><a href="#总线的特点" class="headerlink" title="总线的特点"></a>总线的特点</h3><ol><li>所有的组件都可以看见。</li><li>可以实现<code>$on</code>,<code>$off</code>,<code>$emit</code>方法。</li></ol><h3 id="使用什么可以让所有的组件都能看见？"><a href="#使用什么可以让所有的组件都能看见？" class="headerlink" title="使用什么可以让所有的组件都能看见？"></a>使用什么可以让所有的组件都能看见？</h3><p>一个重要的内置关系 —— <code>VueComponent.prototype._proto === Vue.prototy</code><br>所以选择在<code>Vue</code>的原型对象上添加事件总线</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//main.js文件中</span><span class="token keyword">new</span> <span class="token class-name">vm</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>   <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">//安装全局事件总线</span>   <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token comment">//this ——&gt; vm实例对象，所有组件都可以访问vm</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//A组件，接收数据，绑定自定义事件</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到B组件的数据："</span>data<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//B组件，传递数据，触发自定义事件</span><span class="token comment">//触发</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token function">sendData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//B组件删除事件总线</span><span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h2><p>借助第三方库（pubsub-js）实现任意组件间通信，第三方库有很多，学习理念。<br>安装：<code>npm i pubsub-js</code></p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>A组件：接收数据 ===&gt; 订阅消息<br>B组件：传递数据 ===&gt; 发布消息<br>A组件订阅消息，留一个回调函数。B组件发送消息并传递参数，调用A组件中的回调函数并接收参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//A组件</span><span class="token comment">//引入第三方库</span><span class="token keyword">import</span> pubsub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span><span class="token comment">//订阅消息</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>pubId <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"订阅成功"</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//A组件销毁前取消订阅</span><span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   pubsub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pubId<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//B组件</span><span class="token comment">//引入第三方库</span><span class="token keyword">import</span> pubsub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span><span class="token comment">//发布消息</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token function">publishNews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      pubsub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//subscribe方法的回调参数有两个</span>pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msgName<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment">//msgName: 消息名  data：数据</span><span class="token comment">//subscribe方法的回调函数中this指向改变</span>pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">msgName<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//使用箭头函数解决this指向问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><p><code>Vue</code>中的效率问题：回调全部执行，才解析模板<br>什么时候使用<code>$nextTick</code>:当改变数据后，要基于更新后的DOM进行某些操作时，要在<code>$nextTick</code>所指定的回调函数中执行。<br><code>$nextTick</code>所指定的回调会在DOM节点更新完毕后执行。下一次DOM更新结束后执行其执行的回调。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//下一轮执行</span>   <span class="token comment">//函数体</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：使用<code>setTimeOut</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>   <span class="token comment">//异步执行</span>   <span class="token comment">//函数体</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>访问服务器，发送一个Ajax请求，请求方法：</p><ol><li><code>xhr</code></li><li>二次封装  <code>jQuery</code>  <code>$get</code>  <code>$post</code></li><li><code>axios</code> (<code>promise</code>风格) ===&gt; 使用较多</li><li><code>fetch</code> (<code>windows</code>内置方法,<code>promise</code>风格)</li><li><code>vue-resourse</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:5000/students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token parameter">response</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token parameter">error</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>   <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token comment">//访问不到 http://localhost:5000，存在跨域问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>跨域限制</strong><br>存在浏览器同源策略，是浏览器上为安全性考虑实施的非常重要的安全策略。</p><p><strong>同源指的是什么</strong></p><ol><li>协议名一致</li><li>主机名一致</li><li>端口号一致</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:5000/students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token comment">//访问：http://localhost:5000</span>   <span class="token comment">//本地：http://localhost:8080</span>   <span class="token comment">//协议名，主机名一致，端口号不相同，需要解决跨域问题</span>   <span class="token parameter">response</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token parameter">error</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如何解决跨域问题</strong></p><ol><li><code>cors</code> 特殊的响应头（非前端技术）</li><li><code>jsonp</code> 借助<code>script</code>标签里的<code>src</code>属性，在引入外部资源时不受同源策略的影响。（几乎不用，且只能解决<code>get</code>。问题面试问的多，开发用的少）</li><li>配置代理服务器<br><img src="https://s2.loli.net/2022/03/03/Ws8SriMy3VBTnZQ.jpg"></li></ol><p><strong>如何开启代理服务器</strong></p><ol><li><code>nginx</code></li><li><code>vue-cli</code> </li></ol><h3 id="vue-cli开启代理服务器方法一："><a href="#vue-cli开启代理服务器方法一：" class="headerlink" title="vue-cli开启代理服务器方法一："></a>vue-cli开启代理服务器方法一：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//在vue.config.js文件中添加配置</span><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">}</span><span class="token comment">//axios发送请求</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token comment">//向代理服务器请求信息</span>   <span class="token comment">//http://localhost:8080/ 相当于本地文件夹，students如果这个资源本地有，就不向5000端口发送请求</span>   <span class="token parameter">response</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token parameter">error</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//此方法存在的问题：</span><span class="token comment">//1. 只能配置一个代理</span><span class="token comment">//2. 不灵活控制走代理还是走本地</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue-cli开启代理服务器方法二："><a href="#vue-cli开启代理服务器方法二：" class="headerlink" title="vue-cli开启代理服务器方法二："></a>vue-cli开启代理服务器方法二：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">'/api'</span><span class="token operator">:</span><span class="token punctuation">{</span>         <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span>         <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">'^/api'</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">//发送给5000服务器不带前缀</span>         <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">//用于指示websocket</span>         <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token comment">//控制请求头中的host值，跨域伪造，例如8080端口假装自己是5000端口，避免5000端口做限制。</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string-property property">'/api2'</span><span class="token operator">:</span><span class="token punctuation">{</span>         <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span>         <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">'^/api2'</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">//发送给5001服务器不带前缀</span>         <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">//用于指示websocket</span>         <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token comment">//控制请求头中的host值，跨域伪造，例如8080端口假装自己是5000端口，避免5000端口做限制。</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//axios发送请求</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token comment">//请求前缀添加在端口号后面，控制走不走代理，有前缀，走代理，没有前缀，走本地资源</span>   <span class="token parameter">response</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token parameter">error</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api2/students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token parameter">response</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token parameter">error</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>vue-resource</strong><br><code>vue-resource</code>本质上也是对<code>xhr</code>的封装，现在不太维护了，以前使用较多</p><ol><li>安装 <code>vue-resource</code></li><li>引入 <code>import vueResource from 'vue-resource'</code></li><li>使用 <code>Vue.use(vueResource)</code>(所有的<code>vc</code>,<code>vm</code>上多了一个<code>$http</code>)</li><li>axios发送请求<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/api/students"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token parameter">response</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token parameter">error</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件中：        &lt;Category&gt;           &lt;div&gt;html结构1&lt;/div&gt;        &lt;/Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;               &lt;!-- 定义插槽 --&gt;               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;            &lt;/div&gt;        &lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>具名插槽：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件中：        &lt;Category&gt;            &lt;template slot="center"&gt;              &lt;div&gt;html结构1&lt;/div&gt;            &lt;/template&gt;            &lt;template v-slot:footer&gt;               &lt;div&gt;html结构2&lt;/div&gt;            &lt;/template&gt;        &lt;/Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;               &lt;!-- 定义插槽 --&gt;               &lt;slot name="center"&gt;插槽默认内容...&lt;/slot&gt;               &lt;slot name="footer"&gt;插槽默认内容...&lt;/slot&gt;            &lt;/div&gt;        &lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件中：&lt;Category&gt;&lt;template scope="scopeData"&gt;&lt;!-- 生成的是ul列表 --&gt;&lt;ul&gt;&lt;li v-for="g in scopeData.games" :key="g"&gt;{{g}}&lt;/li&gt;&lt;/ul&gt;&lt;/template&gt;&lt;/Category&gt;&lt;Category&gt;&lt;template slot-scope="scopeData"&gt;&lt;!-- 生成的是h4标题 --&gt;&lt;h4 v-for="g in scopeData.games" :key="g"&gt;{{g}}&lt;/h4&gt;&lt;/template&gt;&lt;/Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;                &lt;slot :games="games"&gt;&lt;/slot&gt;            &lt;/div&gt;        &lt;/template&gt;        &lt;script&gt;            export default {                name:'Category',                props:['title'],                //数据在子组件自身                data() {                    return {                        games:['红色警戒','穿越火线','劲舞团','超级玛丽']                    }                },            }        &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的基本原理</title>
      <link href="/2022/02/10/20220210/"/>
      <url>/2022/02/10/20220210/</url>
      
        <content type="html"><![CDATA[<h4 id="架构模型-——-MVVM"><a href="#架构模型-——-MVVM" class="headerlink" title="架构模型 —— MVVM"></a>架构模型 —— MVVM</h4><h5 id="MVVM简介"><a href="#MVVM简介" class="headerlink" title="MVVM简介"></a>MVVM简介</h5><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。<br>MVVM专注于View 层。它的核心是 MVVM 中的 VM。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性。</p><h5 id="Vue中MVVM的体现"><a href="#Vue中MVVM的体现" class="headerlink" title="Vue中MVVM的体现"></a>Vue中MVVM的体现</h5><ol><li>M：模型：对应<code>data</code>中的数据</li><li>V：视图：模板，对应<code>DOM</code>文档</li><li>VM：视图模型：<code>Vue</code>的实例对象<code>vm</code></li></ol><p><img src="https://s2.loli.net/2022/02/27/enH2UufwyDAN7l6.png" alt="2221929-20210922102500204-541643859.png"></p><p>在MVVM的架构下，View层和Model层并没有直接联系，而是通过ViewModel层进行交互。ViewModel层通过双向数据绑定将View层和Model层连接了起来，使得View层和Model层的同步工作完全是自动的。因此开发者只需关注业务逻辑，无需手动操作DOM，复杂的数据状态维护交给MVVM统一来管理。</p><h4 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h4><blockquote><p>回顾：Object.defineProperty()</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//三个参数（对象名，key，value）</span><span class="token comment">// 此时的的对象属性不可枚举，不可更改，不可删除</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">18</span><span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">//可枚举</span><span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">//可更改</span><span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">//可删除</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//一个简单的数据代理</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">200</span> <span class="token punctuation">}</span><span class="token comment">//通过obj2完成对obj1的操作</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> obj1<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>obj1<span class="token punctuation">.</span>x <span class="token operator">=</span> obj2<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Vue中如何实现数据代理？"><a href="#Vue中如何实现数据代理？" class="headerlink" title="Vue中如何实现数据代理？"></a><code>Vue</code>中如何实现数据代理？</h5><p>通过<code>Object.defineProperty()</code>把<code>data</code>对象中所有属性添加到<code>vm</code>上。为每一个添加到<code>vm</code>上的属性，都指定一个<code>getter/setter</code>。在<code>getter/setter</code>内部去操作（读/写）<code>data</code>中对应的属性。</p><h4 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>指的是在访问或者修改对象的某个属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果（<code>data</code>内的数据改变，页面内容随之改变）。</p><h5 id="Vue中如何实现数据劫持？"><a href="#Vue中如何实现数据劫持？" class="headerlink" title="Vue中如何实现数据劫持？"></a><code>Vue</code>中如何实现数据劫持？</h5><p><code>vm</code>将<code>data</code>内的数据进行加工生成<code>_data</code>，数据劫持就发生在加工过程中，通过observe(观察)每个对象的属性，添加到订阅器dep中，当数据发生变化的时候发出一个notice（预告）。调用setter，重新解析模板，生成虚拟DOM，新旧DOM对比，生成新的页面。</p><h5 id="自己后添加的属性如何实现数据劫持？"><a href="#自己后添加的属性如何实现数据劫持？" class="headerlink" title="自己后添加的属性如何实现数据劫持？"></a>自己后添加的属性如何实现数据劫持？</h5><ul><li>对象实现响应式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token comment">//给data中的person对象添加age属性</span> <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">person</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'zf'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Vue.set()方法</span> Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>person<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this.person ===&gt; vm._data.person</span> <span class="token comment">//因为做了数据代理，通过vm上的person代理_data内的person。</span>  <span class="token comment">//vm.$set()方法</span> vm<span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>person<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//**注意：只能在data的属性上追加，不能在data上追加。</span> <span class="token comment">//即：不可添加与person同级的属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>数组实现响应式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//数组没有getter与setter方法，无法劫持数据。</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">person</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'zf'</span><span class="token punctuation">,</span><span class="token literal-property property">hobby</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'吃饭'</span><span class="token punctuation">,</span><span class="token string">'学习'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用如下数组方法（7个）才能检测到数组的变化</span><span class="token comment">//push(); pop(); shift(); unshift(); splice(); sort(); reverse();</span><span class="token comment">//这些方法已不是传统的数组方法，vue将这些方法进行了包裹。</span>vm<span class="token punctuation">.</span>person<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'敲代码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><h5 id="8-3个生命周期函数（生命周期钩子）"><a href="#8-3个生命周期函数（生命周期钩子）" class="headerlink" title="8+3个生命周期函数（生命周期钩子）"></a>8+3个生命周期函数（生命周期钩子）</h5><img src="https://s2.loli.net/2022/02/28/ltes6bQcJZirdCn.png" alt="图片3.png"><h5 id="销毁实例"><a href="#销毁实例" class="headerlink" title="销毁实例"></a>销毁实例</h5></li><li>自动销毁<br><code>vm.$destory()</code>完全销毁一个实例，清理它与其它实例的连接，解绑它的全部指令和自定义事件。触发<code>boforeDestory</code>和<code>destoryed</code>生命周期函数。</li><li>被动销毁</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set 与 Map 的用法</title>
      <link href="/2022/02/01/20220201/"/>
      <url>/2022/02/01/20220201/</url>
      
        <content type="html"><![CDATA[<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote><p>类似于<code>数组</code>，成员值<code>唯一</code><br>生成方法： <code>const set = new Set()</code><br>参数：数组 / 类似数组 / 或无参数</p></blockquote><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li><code>set.prototype.constructor</code> 构造函数</li><li><code>set.size</code> 返回总成员数   </li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h5><ul><li><code>set.add(value)</code> 添加值，返回set结构本身</li><li><code>set.delete(value)</code> 删除值，返回布尔值，是否成功</li><li><code>set.has(value)</code> 判断值，返回布尔值，是否是该成员</li><li><code>set.clear()</code> 清除所有值，无返回值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                   <span class="token comment">//1,2,3</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                   <span class="token comment">//1,2,3,4</span>set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment">//1.3.4</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                   <span class="token comment">//false</span>set<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h5></li><li><code>set.keys()</code> 返回键名</li><li><code>set.values()</code> 返回键值</li><li><code>set.entries()</code> 返回键值对  —— set中键值与键名相同</li><li><code>set.forEach()</code> 使用回调函数遍历每一个成员，可接收第三个参数，this<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>           <span class="token comment">//2,4,6</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>           <span class="token comment">//2,4,6</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span>                           <span class="token comment">//2,4,6</span>set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2,4,6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//2,4,6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <strong>默认遍历器为<code>values</code>方法</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//以前写的</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//省略后的</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">of</span> set<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><strong>一些用途</strong><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token comment">//数组去重(两种方法)</span> <span class="token comment">//第一种</span><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span>   <span class="token comment">//...set 相当于遍历 set</span> <span class="token comment">//第二种</span>   <span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//字符串去重</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">'abcabcabc'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//实现交集，并集，差集</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//并集</span><span class="token keyword">let</span> bingji <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span><span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//Set(5) {1,2,3,4,5}</span><span class="token comment">//交集</span><span class="token keyword">let</span> jiaoji <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">//set(1) {1}</span><span class="token comment">//差集</span><span class="token keyword">let</span> chaji <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">//set(2) {1,2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>类似<code>对象</code>， <code>键值对</code>的数据结构<br><code>const map = new Map()</code><br>参数：对象 / set / map</p></blockquote><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><p>map.size()  返回<code>map</code>结构总成员数</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><h5 id="操作方法-1"><a href="#操作方法-1" class="headerlink" title="操作方法"></a>操作方法</h5><ul><li><code>map.set(key,value)</code><blockquote><p>key: 键名 键名重复则更新，键名可以是字符串，数值，undefined  <strong>与对象的区别：对象键名只能是字符串</strong><br>value: 键值</p></blockquote></li><li><code>map.get(key)</code> 读取<code>key</code>对应的键值，找不到返回undefined</li><li><code>map.has(key)</code> 返回布尔值，表示是否存在</li><li><code>map.delete(key)</code> 删除某个<code>key</code>，成功则返回<code>true</code></li><li><code>map.clear()</code> 清除所有值，无返回值</li></ul><h5 id="遍历方法-1"><a href="#遍历方法-1" class="headerlink" title="遍历方法"></a>遍历方法</h5><ul><li><p><code>map.keys()</code> 返回键名</p></li><li><p><code>map.values()</code> 返回键值</p></li><li><p><code>map.entries()</code> 返回所有成员</p></li><li><p><code>map.forEach()</code> 遍历<code>map</code>所有成员</p><p>  <strong>默认遍历器为<code>entries</code>方法</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//以前写的</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>map<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token operator">:</span>map<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//省略后的</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>map<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token operator">:</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> set </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript重点</title>
      <link href="/2021/12/02/20211202/"/>
      <url>/2021/12/02/20211202/</url>
      
        <content type="html"><![CDATA[<h3 id="和-运算符的区别"><a href="#和-运算符的区别" class="headerlink" title="== 和 === 运算符的区别"></a>== 和 === 运算符的区别</h3><p><code>==</code> ：会发生类型的转化<br><code>===</code> ：不会发生类型的转化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token boolean">true</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token boolean">false</span> <span class="token operator">===</span> <span class="token number">0</span>'<span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">''</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token string">'   '</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token comment">//null和undefined除了自身外不等于其他值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'false'</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//false ===&gt;'false' == 0?</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">//false 两边都是不确切的值</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> c <span class="token operator">=</span> aa <span class="token operator">==</span> b<span class="token punctuation">;</span> <span class="token comment">//false</span>a <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">//false</span>a <span class="token operator">==</span> c<span class="token punctuation">;</span> <span class="token comment">//true</span>a <span class="token operator">===</span> c<span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="typeof-与-instanceof"><a href="#typeof-与-instanceof" class="headerlink" title="typeof 与 instanceof"></a>typeof 与 instanceof</h3><blockquote><p>简单数据类型(原始类型)：Undefined、Null、Boolean、Number、String 和 Symbol<br>复杂数据类型(引用类型)：Object</p></blockquote><p><code>typeof</code>是判断一个变量是否为字符串、数值、布尔值或 <code>undefined</code> 的最好方式<br><code>instanceof</code> 操作符判断是什么类型的对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变量 person 是 Object 吗？</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变量 colors 是 Array 吗？</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变量 pattern 是 RegExp 吗？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> images <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token parameter">entries</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> image <span class="token operator">=</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">;</span><span class="token keyword">const</span> data_src <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-src'</span><span class="token punctuation">)</span>image<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span>data_src<span class="token punctuation">)</span>observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"触发了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>images<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">image</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="js延迟加载的方式有哪些"><a href="#js延迟加载的方式有哪些" class="headerlink" title="js延迟加载的方式有哪些"></a>js延迟加载的方式有哪些</h3><h4 id="defer和async-异步加载"><a href="#defer和async-异步加载" class="headerlink" title="defer和async(异步加载)"></a>defer和async(异步加载)</h4><ol><li><p>没有<code>defer</code>或<code>async</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该<code>script</code>标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。<br><code>html</code>正在执行中，碰到了<code>script</code>，<code>html</code>停下来等待<code>script</code>加载并执行，<code>script</code>执行后继续加载<code>html</code></p></li><li><p>有<code>async</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加载和渲染后续文档元素的过程将和<code>script.js</code>的加载与执行并行进行（异步)。<br><code>html</code>正在执行中，碰到了<code>script</code>，<code>html</code>执行与<code>script</code>加载同时进行，<code>script</code>加载结束后，<code>html</code>停下来，等待<code>script</code>执行，<code>script</code>执行结束后继续执行<code>html</code></p></li><li><p>有<code>defer</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加载后续文档元素的过程将和<code>script.js</code>的加载并行进行（异步)，但是<code>script.js</code>的执行要在所有元素解析完成之后,<code>DOMContentLoaded</code>事件触发之前完成。<br><code>html</code>正在执行中，碰到了<code>script</code>，<code>html</code>执行与<code>script</code>加载同时进行，<code>script</code>加载完不执行，而是等待<code>html</code>执行完毕开始执行<code>script</code></p></li></ol><h4 id="动态创建DOM元素"><a href="#动态创建DOM元素" class="headerlink" title="动态创建DOM元素"></a>动态创建DOM元素</h4><p>动态创建<code>DOM</code>方式(创建<code>script</code>，插入到<code>DOM</code>中，加载完毕后<code>callBack</code> )<br>创建<code>script</code>，插入到<code>DOM</code>中，加载完毕后<code>callBack</code><br>代码如下︰（有兼容性封装)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement_x</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span>script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>script<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//IE</span>script<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>script<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">"loaded"</span> <span class="token operator">||</span> script<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token string">"complete"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>script<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//Others : Firefox, Safari, Chrome, and Opera</span>script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按需异步载入js"><a href="#按需异步载入js" class="headerlink" title="按需异步载入js"></a>按需异步载入js</h4><p>默认情况<code>javascript</code>是同步加载的，也就是<code>javascript</code>的加载时阻塞的，后面的元素要等待<code>javascript</code>加载完毕后才能进行再加载，对于一些意义不是很大的<code>javascript</code>，如果放在页头会导致加载很慢的话，是会严重影响用户体验的。</p><h3 id="事件冒泡-事件捕获"><a href="#事件冒泡-事件捕获" class="headerlink" title="事件冒泡/事件捕获"></a>事件冒泡/事件捕获</h3><p>事件冒泡：子元素事件的触发会影响父元素事件<br>开启事件冒泡：<code>element.addEventListener(eventName,handler,false)</code><br>关闭事件冒泡：假设传统方式事件的返回值为<code>e</code>,就可以通过<code>e.stopPropagation()</code>来关闭事件冒泡<br>事件捕获：父元素的事件会影响子元素的事件<br>开启事件捕获：<code>element.addEventListener(eventName,handler,true)</code></p><h3 id="强制类型转化和隐式类型转化"><a href="#强制类型转化和隐式类型转化" class="headerlink" title="强制类型转化和隐式类型转化"></a>强制类型转化和隐式类型转化</h3><h4 id="强制类型转化"><a href="#强制类型转化" class="headerlink" title="强制类型转化"></a>强制类型转化</h4><ul><li>转化成字符串 <code>toString()</code>  <code>String()</code></li><li>转化成数字 <code>Number()</code> <code>parseInt()</code> <code>parseFloat()</code></li><li>转化成布尔类型 <code>Boolean()</code><h4 id="隐式类型转化"><a href="#隐式类型转化" class="headerlink" title="隐式类型转化"></a>隐式类型转化</h4></li><li>拼接字符串 </li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习————splice()与slice()</title>
      <link href="/2021/11/15/20211115/"/>
      <url>/2021/11/15/20211115/</url>
      
        <content type="html"><![CDATA[<blockquote><p>slice()和splice()区别<br>slice(start,end)：方法可从已有数组中返回选定的元素，返回一个新数组，从start(包含)到end(不包含)的数组元素。<br>splice()：该方法向或者从数组中添加或者删除项目，返回被删除的项目。（该方法会改变原数组）</p></blockquote><h2 id="slice-函数详解"><a href="#slice-函数详解" class="headerlink" title="slice()函数详解"></a>slice()函数详解</h2><ul><li>start参数：必须，规定从何处开始选取，如果为负数，规定从数组尾部算起的位置，-1是指最后一个元素。</li><li>end参数：可选（如果该参数没有指定，那么切分的数组包含从start倒数组结束的所有元素，如果这个参数为负数，那么规定是从数组尾部开始算起的元素）。</li></ul><h3 id="一、情况一-没有参数"><a href="#一、情况一-没有参数" class="headerlink" title="一、情况一(没有参数)"></a>一、情况一(没有参数)</h3><p>简单的复制</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、情况二-有一个参数"><a href="#二、情况二-有一个参数" class="headerlink" title="二、情况二(有一个参数)"></a>二、情况二(有一个参数)</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// slice(index) ==&gt; 获取从index开始的子数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//[ 3, 4, 5 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// slice(-index) ==&gt; 获取从末尾index+1开始的子数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//[ 4, 5 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三、情况三-有两个参数"><a href="#三、情况三-有两个参数" class="headerlink" title="三、情况三(有两个参数)"></a>三、情况三(有两个参数)</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// slice(start,end) 获取数组中某段子数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//[1,2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//[2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="splice-函数详解"><a href="#splice-函数详解" class="headerlink" title="splice()函数详解"></a>splice()函数详解</h2><blockquote><p>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。<br>注释：该方法会改变原始数组。</p></blockquote><h3 id="一、情况一-只有一个参数"><a href="#一、情况一-只有一个参数" class="headerlink" title="一、情况一(只有一个参数)"></a>一、情况一(只有一个参数)</h3><blockquote><p>splice(index) ——&gt; 从index的位置开始，删除之后的所有元素(包括第index个)<br>若 index &lt; 0 , 则删除最后-index个元素<br>splice()函数返回删除元素数组</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"原数组为："</span><span class="token operator">+</span> array<span class="token punctuation">)</span>    <span class="token comment">//[0,1,2,3,4,5,6]</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"array.splice(2)的结果为："</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span>   <span class="token comment">//[0,1]</span><span class="token keyword">var</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"array.splice(-3)的结果为："</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span>   <span class="token comment">//[0]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"删除的内容为："</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span>     <span class="token comment">//[1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、情况二-两个参数"><a href="#二、情况二-两个参数" class="headerlink" title="二、情况二 (两个参数)"></a>二、情况二 (两个参数)</h3><blockquote><p>splice(index,howMany) ——&gt; 删除从index位置开始的数，howMany为删除的个数<br>若 howMany 小于等于 0，则不删除</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"array.splice(2,1)的结果为："</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span>   <span class="token comment">//[0,1,3,4,5,6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"删除的内容为："</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span>    <span class="token comment">//[2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、情况三-大于等于三个参数"><a href="#三、情况三-大于等于三个参数" class="headerlink" title="三、情况三 (大于等于三个参数)"></a>三、情况三 (大于等于三个参数)</h3><blockquote><p>splice(index ,howMany , item1, …, itemX )</p></blockquote><blockquote><ol><li>index &gt; 0 时<br>(1. howMany 为 0 时 不删除只添加 —— 在index位置前添加item1, …, itemX的数<br>(2. howMany &gt; 0 删除且添加 —— 在index位置前添加item1, …, itemX的数，并且删除从index位置开始的数，howMany为删除的个数</li><li>index &lt; 0 时 最后一个数为 -1 依次倒数第二个数为-2<br>(1. howMany 为 0 时 不删除只添加 —— 在-index位置前添加item1, …, itemX的数<br>(2. howMany &gt; 0 删除且添加 —— 在-index位置前添加item1, …, itemX的数，并且删除从-index位置开始的数，howMany为删除的个数</li></ol></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"原数组为："</span> <span class="token operator">+</span> array<span class="token punctuation">)</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"array.splice(2,0,8,9)的结果为："</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span>    <span class="token comment">//[0,1,8,9,2,3,4,5,6]</span><span class="token keyword">var</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"array.splice(2,0,8,9)的结果为："</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span>     <span class="token comment">//[0,1,8,9,2,8,9,6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"删除的内容为："</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span>                     <span class="token comment">//[3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"原数组为："</span> <span class="token operator">+</span> array<span class="token punctuation">)</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"array.splice(-2,0,8,9)的结果为："</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span>    <span class="token comment">//0,1,2,3,4,8,9,5,6</span><span class="token keyword">var</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>                     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"array.splice(-2,3,8,9)的结果为："</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span>    <span class="token comment">//0,1,2,3,4,8,9,8,9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"删除的内容为："</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span>                     <span class="token comment">//5,6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络原理基础知识</title>
      <link href="/2021/10/06/20211006/"/>
      <url>/2021/10/06/20211006/</url>
      
        <content type="html"><![CDATA[<p>1.网络工作原理<br>2.什么是HTTP：超文本传输协议<br>3.浏览器及工作方式<br>4.DNS 及其工作原理<br>5.域名相关知识：域名解析完整讲解、云服务相关知识<br>10.HTTPS 原理和使用：CORS 跨域请求和安全知识、内容安全策略、OWASP 安全风险知识</p><p>11.XSS攻击的理解<br>12.跨域理解及复杂请求和简单请求 <a href="https://blog.csdn.net/weixin_34320159/article/details/92066012">https://blog.csdn.net/weixin_34320159/article/details/92066012</a><br>13.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.nowcoder.com/test/question/done?tid=61037264&amp;qid=2372566#summary">https://www.nowcoder.com/test/question/done?tid=61037264&amp;qid=2372566#summary</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建 Hexo + github</title>
      <link href="/2021/09/25/20210925/"/>
      <url>/2021/09/25/20210925/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>建立个人博客网站，首先需要一个远程服务器，而GitHub就起到了服务器的作用。<br>在GitHub上搭建一个仓库，我们把自己网站的内容上传至这个仓库，这个仓库就作为我们网站的服务器。<br>Hexo是一个框架，能够快速、高效的帮助我们搭建美观的个人博客。</p><h3 id="准备工作编号"><a href="#准备工作编号" class="headerlink" title="准备工作编号"></a>准备工作编号</h3><ul><li>node.js安装</li><li>git安装</li><li>hexo下载：<code>npm install hexo-cli -g</code>  ——— Hexo 下载   | <code>hexo -v</code> ——— 检查 Hexo 是否成功安装</li></ul><h3 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h3><p>在GitHub上建立一个public仓库，仓库名为 “用户名.github.io”, 这个仓库将作为网站的服务器。</p><h3 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h3><ul><li>检查ssh：进入任意一个文件夹，鼠标右击，选择 Git Bash Here，输入命令：<code>ssh</code>, 检查电脑是否安装ssh，默认已经安装</li></ul><p><img src="https://i.loli.net/2021/09/25/TgV2hAFDOypzcLu.jpg"></p><ul><li>生成ssh：继续输入命令 <code>ssh-keygen -t rsa -C "邮件地址"</code>，（邮件地址是注册 GitHub 账号时的邮件地址），敲四次回车，在C盘下已生成ssh文件夹</li><li>打开C盘 C:\users.ssh  其中有两个文件夹，打开 id_rsa.pub 文件 <img src="https://i.loli.net/2021/09/25/J6ohn4S7GQmrjZk.png"> 复制文件中的一长串代码</li><li>打开 GitHub ，绑定SSH Keys，<img src="https://i.loli.net/2021/09/25/8FZXjUTsgeBwzyl.jpg"><img src="https://i.loli.net/2021/09/25/qO5gEV6lrGwbxuf.png"><img src="https://i.loli.net/2021/09/25/a69CF1vNbfqrhmH.jpg"></li><li>测试是否绑定成功，输入命令<code>ssh -T git@github.com</code> 输入 yes，显示已经绑定成功。</li></ul><h3 id="生成本地博客内容"><a href="#生成本地博客内容" class="headerlink" title="生成本地博客内容"></a>生成本地博客内容</h3><ul><li>新建一个文件夹，我将文件夹取名为Hexo，博客的全部内容将存储在这个文件夹中。</li><li>进入文件夹，右键，Git Bash Here，输入命令：</li><li>命令一：<code>hexo init</code>  ——— 初始化 Hexo ，现在可以看到在 Hexo 空白文件夹下已经生成了很多文件</li><li>命令二：<code>hexo g</code> —— 生成静态页面</li><li>命令三：<code>hexo s</code>  ——— 生成本地 hexo 页面</li><li>浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，可以看到一个简单的静态页面，这是 hexo框架 帮助我们搭建好的，并且给我们写了第一篇 Hello World 文章。</li></ul><h3 id="将博客部署到互联网"><a href="#将博客部署到互联网" class="headerlink" title="将博客部署到互联网"></a>将博客部署到互联网</h3><ul><li><p>进入 Hexo 文件夹，打开 _config.yml 文件。</p></li><li><p>在文件的最后找到 Deployment 部分，将它修改为<img src="https://i.loli.net/2021/09/25/f9rGKojQVXiMckI.jpg"></p></li><li><p>进入 Hexo 文件夹，右键，Git Bash Here，输入命令：</p></li><li><p>命令一：<code>hexo-deployer-git --save</code> —— 安装 hexo 自动部署发布工具</p></li><li><p>命令二：<code>hexo g</code> —— 生成页面</p></li><li><p>命令三：<code>git config --global user.email "你的邮箱"</code></p></li><li><p>命令四：<code>git config --global user.name "你的 Github 用户名"</code></p></li><li><p>命令五：<code>hexo d</code> ——将本地文件全部上传 GitHub 仓库</p></li><li><p>输入命令五之后，将弹出一个框框，第一个框框输入 “你的 GitHub 用户名”，点击确定，弹出第二个框框，不输入密码，去设置令牌。</p><p><img src="https://i.loli.net/2021/09/25/U4JmsRG8xteb5iF.jpg"><img src="https://i.loli.net/2021/09/25/nLrMJfxV9qSjQsv.jpg"><img src="https://i.loli.net/2021/09/25/zNRxvJop5YKcwUO.png"><img src="https://i.loli.net/2021/09/25/lURs3d1b6hK87Cv.jpg"><img src="https://i.loli.net/2021/09/25/4poRfTAw5igkqBK.jpg"><br>将这一串东西输入刚刚的密码框里。</p></li><li><p>网站部署成功，现在就可以通过网址 <a href="https://fanxx123.github.io/">https://fanxx123.github.io/</a> 访问你的博客，所有人都可以访问到。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
